{"ast":null,"code":"import _objectSpread from \"D:\\\\hihi2\\\\client\\\\react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"D:\\\\hihi2\\\\client\\\\react\\\\src\\\\app\\\\views\\\\Employee1\\\\Employee1EditDialog.jsx\";\nimport React, { Component } from \"react\";\nimport { IconButton, Dialog, Button, Icon, Grid, DialogActions } from \"@material-ui/core\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\"; // CommonJS format\n// ES2015 module syntax\n\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { addNewEmploeyee, updateEmployee, nameWasUsed, getAllDepartmentTest } from \"./Employee1Service\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\ntoast.configure();\n\nfunction PaperComponent(props) {\n  return /*#__PURE__*/React.createElement(Draggable, {\n    handle: \"#draggable-dialog-title\",\n    cancel: '[class*=\"MuiDialogContent-root\"]',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  })));\n}\n\nclass Employee1EditDialog extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      listDepartmentTest: [],\n      name: \"\",\n      department2Dto: {},\n      description: \"\",\n      totalElements: 0,\n      rowsPerPage: 25,\n      page: 0\n    };\n\n    this.handleChange = (event, source) => {\n      event.persist();\n\n      if (source === \"switch\") {\n        this.setState({\n          isActive: event.target.checked\n        });\n        return;\n      }\n\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleFormSubmit = () => {\n      let t = this.props.t;\n      let id = this.state.id;\n      this.setState({\n        disabled: true\n      });\n      this.props.handleOKEditClose();\n      console.log(this.state);\n\n      if (id) {\n        updateEmployee(_objectSpread({}, this.state)).then(() => {\n          this.props.handleClose();\n        });\n      } else {\n        addNewEmploeyee(_objectSpread({}, this.state)).then(() => {\n          this.props.handleClose();\n        });\n      }\n    };\n\n    this.updatePageData = () => {\n      getAllDepartmentTest().then(({\n        data\n      }) => this.setState({\n        listDepartmentTest: [...data]\n      }));\n      console.log(this.state.listDepartmentTest);\n    };\n  }\n\n  componentDidMount() {\n    this.updatePageData();\n  }\n\n  render() {\n    const icon = /*#__PURE__*/React.createElement(CheckBoxOutlineBlankIcon, {\n      fontSize: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 18\n      }\n    });\n    const checkedIcon = /*#__PURE__*/React.createElement(CheckBoxIcon, {\n      fontSize: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 24\n      }\n    }); // Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\n\n    const top100Films = [{\n      title: 'The Shawshank Redemption',\n      year: 1994\n    }, {\n      title: 'The Godfather',\n      year: 1972\n    }, {\n      title: 'The Godfather: Part II',\n      year: 1974\n    }, {\n      title: 'The Dark Knight',\n      year: 2008\n    }, {\n      title: '12 Angry Men',\n      year: 1957\n    }, {\n      title: \"Schindler's List\",\n      year: 1993\n    }, {\n      title: 'Pulp Fiction',\n      year: 1994\n    }, {\n      title: 'The Lord of the Rings: The Return of the King',\n      year: 2003\n    }, {\n      title: 'The Good, the Bad and the Ugly',\n      year: 1966\n    }, {\n      title: 'Fight Club',\n      year: 1999\n    }, {\n      title: 'The Lord of the Rings: The Fellowship of the Ring',\n      year: 2001\n    }, {\n      title: 'Star Wars: Episode V - The Empire Strikes Back',\n      year: 1980\n    }, {\n      title: 'Forrest Gump',\n      year: 1994\n    }, {\n      title: 'Inception',\n      year: 2010\n    }, {\n      title: 'The Lord of the Rings: The Two Towers',\n      year: 2002\n    }, {\n      title: \"One Flew Over the Cuckoo's Nest\",\n      year: 1975\n    }, {\n      title: 'Goodfellas',\n      year: 1990\n    }, {\n      title: 'The Matrix',\n      year: 1999\n    }, {\n      title: 'Seven Samurai',\n      year: 1954\n    }, {\n      title: 'Star Wars: Episode IV - A New Hope',\n      year: 1977\n    }, {\n      title: 'City of God',\n      year: 2002\n    }, {\n      title: 'Se7en',\n      year: 1995\n    }, {\n      title: 'The Silence of the Lambs',\n      year: 1991\n    }, {\n      title: \"It's a Wonderful Life\",\n      year: 1946\n    }, {\n      title: 'Life Is Beautiful',\n      year: 1997\n    }, {\n      title: 'The Usual Suspects',\n      year: 1995\n    }, {\n      title: 'LÃ©on: The Professional',\n      year: 1994\n    }, {\n      title: 'Spirited Away',\n      year: 2001\n    }, {\n      title: 'Saving Private Ryan',\n      year: 1998\n    }, {\n      title: 'Once Upon a Time in the West',\n      year: 1968\n    }, {\n      title: 'American History X',\n      year: 1998\n    }, {\n      title: 'Interstellar',\n      year: 2014\n    }];\n    let _this$state = this.state,\n        id = _this$state.id,\n        name = _this$state.name,\n        disabled = _this$state.disabled,\n        listDepartmentTest = _this$state.listDepartmentTest,\n        department2Dto = _this$state.department2Dto;\n    let _this$props = this.props,\n        open = _this$props.open,\n        t = _this$props.t;\n    return /*#__PURE__*/React.createElement(Dialog, {\n      open: open,\n      PaperComponent: PaperComponent,\n      maxWidth: \"sm\",\n      fullWidth: \"fullWidth\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ValidatorForm, {\n      ref: \"form\",\n      onSubmit: this.handleFormSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        cursor: \"move\"\n      },\n      id: \"draggable-dialog-title\",\n      className: \"flex flex-space-between flex-middle pl-16 pr-8 py-8 bg-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"m-0 text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, this.state.id ? t(\"employee.update\") : t(\"employee.add\")), /*#__PURE__*/React.createElement(IconButton, {\n      onClick: this.props.handleClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      className: \"text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 15\n      }\n    }, \"clear\"))), /*#__PURE__*/React.createElement(DialogContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      className: \"mb-10\",\n      container: true,\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      sm: 6,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TextValidator, {\n      className: \"w-100\",\n      label: t(\"employee.name\"),\n      onChange: this.handleChange,\n      type: \"text\",\n      name: \"name\",\n      value: name,\n      validators: [\"required\"],\n      errorMessages: [\"this field is required\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Autocomplete, {\n      multiple: true,\n      id: \"checkboxes-tags-demo\",\n      options: top100Films,\n      disableCloseOnSelect: true,\n      getOptionLabel: option => option.title,\n      renderOption: (option, {\n        selected\n      }) => /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        icon: icon,\n        checkedIcon: checkedIcon,\n        style: {\n          marginRight: 8\n        },\n        checked: selected,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 18\n        }\n      }), option.title),\n      style: {\n        width: 500\n      },\n      renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n        variant: \"outlined\",\n        label: \"Checkboxes\",\n        placeholder: \"Favorites\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 9\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 18\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      sm: 6,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 15\n      }\n    }, listDepartmentTest && /*#__PURE__*/React.createElement(Autocomplete, {\n      options: listDepartmentTest,\n      disableClearable: true,\n      defaultValue: () => {\n        const defaultCurrency = listDepartmentTest === null || listDepartmentTest === void 0 ? void 0 : listDepartmentTest.filter(item => (item === null || item === void 0 ? void 0 : item.id) == (department2Dto === null || department2Dto === void 0 ? void 0 : department2Dto.id));\n        return defaultCurrency !== null && (defaultCurrency === null || defaultCurrency === void 0 ? void 0 : defaultCurrency.length) > 0 ? defaultCurrency[0] : null;\n      },\n      style: {\n        width: \"100%\"\n      },\n      onChange: (event, value) => {\n        this.setState({\n          department2Dto: value\n        });\n      },\n      getOptionLabel: option => \"\".concat(option === null || option === void 0 ? void 0 : option.name),\n      getOptionSelected: (option, value) => (option === null || option === void 0 ? void 0 : option.name) === (value === null || value === void 0 ? void 0 : value.name),\n      renderInput: params => /*#__PURE__*/React.createElement(TextValidator, Object.assign({}, params, {\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 32\n          }\n        }, \"    \", t(\"department2Dto.name\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 27\n          }\n        }, \"  \", \" \", \"*\", \" \", \" \"), \"  \"),\n        value: department2Dto,\n        validators: [\"required\"],\n        errorMessages: [t(\"Validation.this_field_is_required\")],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 23\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 12,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 16\n      }\n    })))), /*#__PURE__*/React.createElement(DialogActions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex flex-space-between flex-middle mt-36\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      className: \"mr-36\",\n      onClick: () => this.props.handleClose(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 15\n      }\n    }, t(\"general.cancel\")), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      disabled: disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 15\n      }\n    }, t(\"general.save\"))))));\n  }\n\n}\n\nexport default Employee1EditDialog;","map":{"version":3,"sources":["D:/hihi2/client/react/src/app/views/Employee1/Employee1EditDialog.jsx"],"names":["React","Component","IconButton","Dialog","Button","Icon","Grid","DialogActions","toast","ValidatorForm","TextValidator","addNewEmploeyee","updateEmployee","nameWasUsed","getAllDepartmentTest","DialogContent","Autocomplete","TextField","Draggable","Paper","Checkbox","CheckBoxOutlineBlankIcon","CheckBoxIcon","configure","PaperComponent","props","Employee1EditDialog","state","listDepartmentTest","name","department2Dto","description","totalElements","rowsPerPage","page","handleChange","event","source","persist","setState","isActive","target","checked","value","handleFormSubmit","t","id","disabled","handleOKEditClose","console","log","then","handleClose","updatePageData","data","componentDidMount","render","icon","checkedIcon","top100Films","title","year","open","cursor","option","selected","marginRight","width","params","defaultCurrency","filter","item","length","color"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACEC,UADF,EAEEC,MAFF,EAGEC,MAHF,EAIEC,IAJF,EAKEC,IALF,EAMEC,aANF,QAOO,mBAPP;AAQA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,uCAAP,C,CACA;AACC;;AAED,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,kCAA7C;AACA,SACEC,eADF,EAEEC,cAFF,EAGEC,WAHF,EAIEC,oBAJF,QAKO,oBALP;AAMA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,wBAAP,MAAqC,yCAArC;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACAd,KAAK,CAACe,SAAN;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,sBACE,oBAAC,SAAD;AACE,IAAA,MAAM,EAAC,yBADT;AAEE,IAAA,MAAM,EAAE,kCAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE,oBAAC,KAAD,oBAAWA,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJF,CADF;AAQD;;AAED,MAAMC,mBAAN,SAAkCzB,SAAlC,CAA4C;AAAA;AAAA;AAAA,SAE1C0B,KAF0C,GAElC;AACNC,MAAAA,kBAAkB,EAAC,EADb;AAENC,MAAAA,IAAI,EAAE,EAFA;AAGNC,MAAAA,cAAc,EAAE,EAHV;AAKNC,MAAAA,WAAW,EAAE,EALP;AAMNC,MAAAA,aAAa,EAAE,CANT;AAONC,MAAAA,WAAW,EAAE,EAPP;AAQNC,MAAAA,IAAI,EAAE;AARA,KAFkC;;AAAA,SAc1CC,YAd0C,GAc3B,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChCD,MAAAA,KAAK,CAACE,OAAN;;AACA,UAAID,MAAM,KAAK,QAAf,EAAyB;AACvB,aAAKE,QAAL,CAAc;AAAEC,UAAAA,QAAQ,EAAEJ,KAAK,CAACK,MAAN,CAAaC;AAAzB,SAAd;AACA;AACD;;AACD,WAAKH,QAAL,CAAc;AACZ,SAACH,KAAK,CAACK,MAAN,CAAaZ,IAAd,GAAqBO,KAAK,CAACK,MAAN,CAAaE;AADtB,OAAd;AAGD,KAvByC;;AAAA,SAyB1CC,gBAzB0C,GAyBvB,MAAM;AAAA,UACjBC,CADiB,GACX,KAAKpB,KADM,CACjBoB,CADiB;AAAA,UAEjBC,EAFiB,GAEX,KAAKnB,KAFM,CAEjBmB,EAFiB;AAGvB,WAAKP,QAAL,CAAc;AAAEQ,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACA,WAAKtB,KAAL,CAAWuB,iBAAX;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKvB,KAAjB;;AACA,UAAImB,EAAJ,EAAQ;AACNlC,QAAAA,cAAc,mBACT,KAAKe,KADI,EAAd,CAEGwB,IAFH,CAEQ,MAAM;AACZ,eAAK1B,KAAL,CAAW2B,WAAX;AACD,SAJD;AAKD,OAND,MAMO;AACLzC,QAAAA,eAAe,mBACV,KAAKgB,KADK,EAAf,CAEGwB,IAFH,CAEQ,MAAM;AACZ,eAAK1B,KAAL,CAAW2B,WAAX;AACD,SAJD;AAKD;AACF,KA5CyC;;AAAA,SAoD1CC,cApD0C,GAoDzB,MAAM;AACrBvC,MAAAA,oBAAoB,GAAGqC,IAAvB,CAA4B,CAAC;AAAEG,QAAAA;AAAF,OAAD,KAAc,KAAKf,QAAL,CAAc;AAAEX,QAAAA,kBAAkB,EAAE,CAAC,GAAG0B,IAAJ;AAAtB,OAAd,CAA1C;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKvB,KAAL,CAAWC,kBAAvB;AACD,KAvDyC;AAAA;;AA+C1C2B,EAAAA,iBAAiB,GAAG;AAClB,SAAKF,cAAL;AAED;;AAQDG,EAAAA,MAAM,GAAG;AACP,UAAMC,IAAI,gBAAG,oBAAC,wBAAD;AAA0B,MAAA,QAAQ,EAAC,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb;AACD,UAAMC,WAAW,gBAAG,oBAAC,YAAD;AAAc,MAAA,QAAQ,EAAC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAApB,CAFQ,CAGP;;AACD,UAAMC,WAAW,GAAG,CACrB;AAAEC,MAAAA,KAAK,EAAE,0BAAT;AAAqCC,MAAAA,IAAI,EAAE;AAA3C,KADqB,EAErB;AAAED,MAAAA,KAAK,EAAE,eAAT;AAA0BC,MAAAA,IAAI,EAAE;AAAhC,KAFqB,EAGrB;AAAED,MAAAA,KAAK,EAAE,wBAAT;AAAmCC,MAAAA,IAAI,EAAE;AAAzC,KAHqB,EAIrB;AAAED,MAAAA,KAAK,EAAE,iBAAT;AAA4BC,MAAAA,IAAI,EAAE;AAAlC,KAJqB,EAKrB;AAAED,MAAAA,KAAK,EAAE,cAAT;AAAyBC,MAAAA,IAAI,EAAE;AAA/B,KALqB,EAMrB;AAAED,MAAAA,KAAK,EAAE,kBAAT;AAA6BC,MAAAA,IAAI,EAAE;AAAnC,KANqB,EAOrB;AAAED,MAAAA,KAAK,EAAE,cAAT;AAAyBC,MAAAA,IAAI,EAAE;AAA/B,KAPqB,EAQrB;AAAED,MAAAA,KAAK,EAAE,+CAAT;AAA0DC,MAAAA,IAAI,EAAE;AAAhE,KARqB,EASrB;AAAED,MAAAA,KAAK,EAAE,gCAAT;AAA2CC,MAAAA,IAAI,EAAE;AAAjD,KATqB,EAUrB;AAAED,MAAAA,KAAK,EAAE,YAAT;AAAuBC,MAAAA,IAAI,EAAE;AAA7B,KAVqB,EAWrB;AAAED,MAAAA,KAAK,EAAE,mDAAT;AAA8DC,MAAAA,IAAI,EAAE;AAApE,KAXqB,EAYrB;AAAED,MAAAA,KAAK,EAAE,gDAAT;AAA2DC,MAAAA,IAAI,EAAE;AAAjE,KAZqB,EAarB;AAAED,MAAAA,KAAK,EAAE,cAAT;AAAyBC,MAAAA,IAAI,EAAE;AAA/B,KAbqB,EAcrB;AAAED,MAAAA,KAAK,EAAE,WAAT;AAAsBC,MAAAA,IAAI,EAAE;AAA5B,KAdqB,EAerB;AAAED,MAAAA,KAAK,EAAE,uCAAT;AAAkDC,MAAAA,IAAI,EAAE;AAAxD,KAfqB,EAgBrB;AAAED,MAAAA,KAAK,EAAE,iCAAT;AAA4CC,MAAAA,IAAI,EAAE;AAAlD,KAhBqB,EAiBrB;AAAED,MAAAA,KAAK,EAAE,YAAT;AAAuBC,MAAAA,IAAI,EAAE;AAA7B,KAjBqB,EAkBrB;AAAED,MAAAA,KAAK,EAAE,YAAT;AAAuBC,MAAAA,IAAI,EAAE;AAA7B,KAlBqB,EAmBrB;AAAED,MAAAA,KAAK,EAAE,eAAT;AAA0BC,MAAAA,IAAI,EAAE;AAAhC,KAnBqB,EAoBrB;AAAED,MAAAA,KAAK,EAAE,oCAAT;AAA+CC,MAAAA,IAAI,EAAE;AAArD,KApBqB,EAqBrB;AAAED,MAAAA,KAAK,EAAE,aAAT;AAAwBC,MAAAA,IAAI,EAAE;AAA9B,KArBqB,EAsBrB;AAAED,MAAAA,KAAK,EAAE,OAAT;AAAkBC,MAAAA,IAAI,EAAE;AAAxB,KAtBqB,EAuBrB;AAAED,MAAAA,KAAK,EAAE,0BAAT;AAAqCC,MAAAA,IAAI,EAAE;AAA3C,KAvBqB,EAwBrB;AAAED,MAAAA,KAAK,EAAE,uBAAT;AAAkCC,MAAAA,IAAI,EAAE;AAAxC,KAxBqB,EAyBrB;AAAED,MAAAA,KAAK,EAAE,mBAAT;AAA8BC,MAAAA,IAAI,EAAE;AAApC,KAzBqB,EA0BrB;AAAED,MAAAA,KAAK,EAAE,oBAAT;AAA+BC,MAAAA,IAAI,EAAE;AAArC,KA1BqB,EA2BrB;AAAED,MAAAA,KAAK,EAAE,wBAAT;AAAmCC,MAAAA,IAAI,EAAE;AAAzC,KA3BqB,EA4BrB;AAAED,MAAAA,KAAK,EAAE,eAAT;AAA0BC,MAAAA,IAAI,EAAE;AAAhC,KA5BqB,EA6BrB;AAAED,MAAAA,KAAK,EAAE,qBAAT;AAAgCC,MAAAA,IAAI,EAAE;AAAtC,KA7BqB,EA8BrB;AAAED,MAAAA,KAAK,EAAE,8BAAT;AAAyCC,MAAAA,IAAI,EAAE;AAA/C,KA9BqB,EA+BrB;AAAED,MAAAA,KAAK,EAAE,oBAAT;AAA+BC,MAAAA,IAAI,EAAE;AAArC,KA/BqB,EAgCrB;AAAED,MAAAA,KAAK,EAAE,cAAT;AAAyBC,MAAAA,IAAI,EAAE;AAA/B,KAhCqB,CAApB;AAJQ,sBAsCuD,KAAKlC,KAtC5D;AAAA,QAsCDmB,EAtCC,eAsCDA,EAtCC;AAAA,QAsCGjB,IAtCH,eAsCGA,IAtCH;AAAA,QAsCSkB,QAtCT,eAsCSA,QAtCT;AAAA,QAsCkBnB,kBAtClB,eAsCkBA,kBAtClB;AAAA,QAsCqCE,cAtCrC,eAsCqCA,cAtCrC;AAAA,sBAuCW,KAAKL,KAvChB;AAAA,QAuCDqC,IAvCC,eAuCDA,IAvCC;AAAA,QAuCKjB,CAvCL,eAuCKA,CAvCL;AAwCP,wBACE,oBAAC,MAAD;AACE,MAAA,IAAI,EAAEiB,IADR;AAEE,MAAA,cAAc,EAAEtC,cAFlB;AAGE,MAAA,QAAQ,EAAC,IAHX;AAIE,MAAA,SAAS,EAAC,WAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAME,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,MAAnB;AAA0B,MAAA,QAAQ,EAAE,KAAKoB,gBAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,KAAK,EAAE;AAAEmB,QAAAA,MAAM,EAAE;AAAV,OADT;AAEE,MAAA,EAAE,EAAC,wBAFL;AAGE,MAAA,SAAS,EAAC,gEAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE;AAAI,MAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKpC,KAAL,CAAWmB,EAAX,GACGD,CAAC,CAAC,iBAAD,CADJ,GAEGA,CAAC,CAAC,cAAD,CAHP,CALF,eAUE,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAE,KAAKpB,KAAL,CAAW2B,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CAVF,CADF,eAeE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,OAAhB;AAAwB,MAAA,SAAS,MAAjC;AAAkC,MAAA,OAAO,EAAE,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAkB,MAAA,EAAE,EAAE,CAAtB;AAAyB,MAAA,EAAE,EAAE,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,aAAD;AACE,MAAA,SAAS,EAAC,OADZ;AAEE,MAAA,KAAK,EAAEP,CAAC,CAAC,eAAD,CAFV;AAGE,MAAA,QAAQ,EAAE,KAAKV,YAHjB;AAIE,MAAA,IAAI,EAAC,MAJP;AAKE,MAAA,IAAI,EAAC,MALP;AAME,MAAA,KAAK,EAAEN,IANT;AAOE,MAAA,UAAU,EAAE,CAAC,UAAD,CAPd;AAQE,MAAA,aAAa,EAAE,CAAC,wBAAD,CARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAWG,oBAAC,YAAD;AACA,MAAA,QAAQ,MADR;AAEA,MAAA,EAAE,EAAC,sBAFH;AAGE,MAAA,OAAO,EAAE8B,WAHX;AAIF,MAAA,oBAAoB,MAJlB;AAKA,MAAA,cAAc,EAAGK,MAAD,IAAYA,MAAM,CAACJ,KALnC;AAMF,MAAA,YAAY,EAAE,CAACI,MAAD,EAAS;AAAEC,QAAAA;AAAF,OAAT,kBACX,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACD,oBAAC,QAAD;AACA,QAAA,IAAI,EAAER,IADN;AAEF,QAAA,WAAW,EAAEC,WAFX;AAGF,QAAA,KAAK,EAAE;AAAEQ,UAAAA,WAAW,EAAE;AAAf,SAHL;AAIH,QAAA,OAAO,EAAED,QAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADC,EAOHD,MAAM,CAACJ,KAPJ,CAPD;AAiBX,MAAA,KAAK,EAAE;AAAEO,QAAAA,KAAK,EAAE;AAAT,OAjBI;AAkBX,MAAA,WAAW,EAAGC,MAAD,iBACX,oBAAC,SAAD,oBAAeA,MAAf;AAAuB,QAAA,OAAO,EAAC,UAA/B;AAA0C,QAAA,KAAK,EAAC,YAAhD;AAA6D,QAAA,WAAW,EAAC,WAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAnBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXH,CADF,eAoCE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAkB,MAAA,EAAE,EAAE,CAAtB;AAAyB,MAAA,EAAE,EAAE,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACAxC,kBAAkB,iBACd,oBAAC,YAAD;AACE,MAAA,OAAO,EAAEA,kBADX;AAEE,MAAA,gBAAgB,MAFlB;AAGE,MAAA,YAAY,EAAE,MAAM;AAClB,cAAMyC,eAAe,GAAGzC,kBAAH,aAAGA,kBAAH,uBAAGA,kBAAkB,CAAE0C,MAApB,CACrBC,IAAD,IAAU,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEzB,EAAN,MAAYhB,cAAZ,aAAYA,cAAZ,uBAAYA,cAAc,CAAEgB,EAA5B,CADY,CAAxB;AAGA,eAAOuB,eAAe,KAAK,IAApB,IAA4B,CAAAA,eAAe,SAAf,IAAAA,eAAe,WAAf,YAAAA,eAAe,CAAEG,MAAjB,IAA0B,CAAtD,GACHH,eAAe,CAAC,CAAD,CADZ,GAEH,IAFJ;AAID,OAXH;AAYE,MAAA,KAAK,EAAE;AAAEF,QAAAA,KAAK,EAAE;AAAT,OAZT;AAaE,MAAA,QAAQ,EAAE,CAAC/B,KAAD,EAAQO,KAAR,KAAkB;AAC1B,aAAKJ,QAAL,CAAc;AAAET,UAAAA,cAAc,EAAEa;AAAlB,SAAd;AACD,OAfH;AAgBE,MAAA,cAAc,EAAGqB,MAAD,cAAeA,MAAf,aAAeA,MAAf,uBAAeA,MAAM,CAAEnC,IAAvB,CAhBlB;AAiBE,MAAA,iBAAiB,EAAE,CAACmC,MAAD,EAASrB,KAAT,KAAmB,CAAAqB,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEnC,IAAR,OAAiBc,KAAjB,aAAiBA,KAAjB,uBAAiBA,KAAK,CAAEd,IAAxB,CAjBxC;AAkBE,MAAA,WAAW,EAAGuC,MAAD,iBACX,oBAAC,aAAD,oBACMA,MADN;AAEE,QAAA,KAAK,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAWvB,CAAC,CAAC,qBAAD,CAAZ,EAAqC,GAArC,eACL;AAAM,UAAA,KAAK,EAAE;AAAE4B,YAAAA,KAAK,EAAE;AAAT,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAmC,GAAnC,OAAyC,GAAzC,MADK,OAFT;AAKE,QAAA,KAAK,EAAE3C,cALT;AAME,QAAA,UAAU,EAAE,CAAC,UAAD,CANd;AAOE,QAAA,aAAa,EAAE,CACbe,CAAC,CAAC,mCAAD,CADY,CAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAmCC,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAmB,MAAA,EAAE,EAAE,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnCD,CApCF,CADF,CAfF,eA6FE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,2CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,OAAO,EAAC,WADV;AAEE,MAAA,KAAK,EAAC,WAFR;AAGE,MAAA,SAAS,EAAC,OAHZ;AAIE,MAAA,OAAO,EAAE,MAAM,KAAKpB,KAAL,CAAW2B,WAAX,EAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGP,CAAC,CAAC,gBAAD,CANJ,CADF,eASE,oBAAC,MAAD;AACE,MAAA,OAAO,EAAC,WADV;AAEE,MAAA,KAAK,EAAC,SAFR;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,QAAQ,EAAEE,QAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGF,CAAC,CAAC,cAAD,CANJ,CATF,CADF,CA7FF,CANF,CADF;AA2HD;;AA7NyC;;AAgO5C,eAAenB,mBAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  IconButton,\r\n  Dialog,\r\n  Button,\r\n  Icon,\r\n  Grid,\r\n  DialogActions,\r\n} from \"@material-ui/core\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n// CommonJS format\r\n // ES2015 module syntax\r\n\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport {\r\n  addNewEmploeyee,\r\n  updateEmployee,\r\n  nameWasUsed,\r\n  getAllDepartmentTest,\r\n} from \"./Employee1Service\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Draggable from \"react-draggable\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\ntoast.configure();\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#draggable-dialog-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nclass Employee1EditDialog extends Component {\r\n\r\n  state = {\r\n    listDepartmentTest:[],\r\n    name: \"\",\r\n    department2Dto: {\r\n     },\r\n    description: \"\",\r\n    totalElements: 0,\r\n    rowsPerPage: 25,\r\n    page: 0,\r\n    \r\n  };\r\n \r\n  handleChange = (event, source) => {\r\n    event.persist();\r\n    if (source === \"switch\") {\r\n      this.setState({ isActive: event.target.checked });\r\n      return;\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleFormSubmit = () => {\r\n    let { t } = this.props;\r\n    let { id} = this.state;\r\n    this.setState({ disabled: true });\r\n    this.props.handleOKEditClose();\r\n    console.log(this.state);\r\n    if (id) {\r\n      updateEmployee({\r\n        ...this.state\r\n      }).then(() => {\r\n        this.props.handleClose();\r\n      });\r\n    } else {\r\n      addNewEmploeyee({\r\n        ...this.state\r\n      }).then(() => {\r\n        this.props.handleClose();\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    this.updatePageData();\r\n    \r\n  }\r\n\r\n  updatePageData = () => {\r\n    getAllDepartmentTest().then(({ data }) => this.setState({ listDepartmentTest: [...data] }));\r\n    console.log(this.state.listDepartmentTest);\r\n  };\r\n\r\n\r\n  render() {\r\n    const icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\n   const checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n    // Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\n   const top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'LÃ©on: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n];\r\n    let { id, name, disabled,listDepartmentTest,department2Dto} = this.state;\r\n    let { open, t } = this.props;\r\n    return (\r\n      <Dialog\r\n        open={open}\r\n        PaperComponent={PaperComponent}\r\n        maxWidth=\"sm\"\r\n        fullWidth=\"fullWidth\"\r\n      >\r\n        <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit}>\r\n          <div\r\n            style={{ cursor: \"move\" }}\r\n            id=\"draggable-dialog-title\"\r\n            className=\"flex flex-space-between flex-middle pl-16 pr-8 py-8 bg-primary\"\r\n          >\r\n            <h4 className=\"m-0 text-white\">\r\n              {this.state.id\r\n                ? t(\"employee.update\")\r\n                : t(\"employee.add\")}\r\n            </h4>\r\n            <IconButton onClick={this.props.handleClose}>\r\n              <Icon className=\"text-white\">clear</Icon>\r\n            </IconButton>\r\n          </div>\r\n          <DialogContent>\r\n            <Grid className=\"mb-10\" container spacing={3}>\r\n              <Grid item md={6} sm={6} xs={6}>\r\n                <TextValidator\r\n                  className=\"w-100\"\r\n                  label={t(\"employee.name\")}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  validators={[\"required\"]}\r\n                  errorMessages={[\"this field is required\"]}\r\n                />\r\n                 <Autocomplete\r\n                 multiple\r\n                 id=\"checkboxes-tags-demo\"\r\n                   options={top100Films}\r\n               disableCloseOnSelect\r\n                 getOptionLabel={(option) => option.title}\r\n               renderOption={(option, { selected }) => (\r\n                  <React.Fragment>\r\n                 <Checkbox\r\n                 icon={icon}\r\n               checkedIcon={checkedIcon}\r\n               style={{ marginRight: 8 }}\r\n              checked={selected}\r\n              />\r\n              {option.title}\r\n        </React.Fragment>\r\n      )}\r\n      style={{ width: 500 }}\r\n      renderInput={(params) => (\r\n        <TextField {...params} variant=\"outlined\" label=\"Checkboxes\" placeholder=\"Favorites\" />\r\n      )}\r\n    />\r\n                \r\n              </Grid>\r\n              <Grid item md={6} sm={6} xs={6}>\r\n             {listDepartmentTest && (\r\n                  <Autocomplete\r\n                    options={listDepartmentTest}\r\n                    disableClearable\r\n                    defaultValue={() => {\r\n                      const defaultCurrency = listDepartmentTest?.filter(\r\n                        (item) => item?.id == department2Dto?.id\r\n                      );\r\n                      return defaultCurrency !== null && defaultCurrency?.length > 0\r\n                        ? defaultCurrency[0]\r\n                        : null;\r\n\r\n                    }}\r\n                    style={{ width: \"100%\" }}\r\n                    onChange={(event, value) => {\r\n                      this.setState({ department2Dto: value }) \r\n                    }}\r\n                    getOptionLabel={(option) => `${option?.name}`}\r\n                    getOptionSelected={(option, value) => option?.name === value?.name}\r\n                    renderInput={(params) => (\r\n                      <TextValidator\r\n                        {...params}\r\n                        label={<span>    {t(\"department2Dto.name\")}{\" \"}\r\n                          <span style={{ color: \"red\", }}>  {\" \"}*{\" \"} </span>  </span>\r\n                        }\r\n                        value={department2Dto}\r\n                        validators={[\"required\"]}\r\n                        errorMessages={[\r\n                          t(\"Validation.this_field_is_required\"),\r\n                        ]}\r\n                      />\r\n                    )}\r\n                  />\r\n                )}\r\n               <Grid item sm={12} xs={12}>\r\n               \r\n              </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <div className=\"flex flex-space-between flex-middle mt-36\">\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className=\"mr-36\"\r\n                onClick={() => this.props.handleClose()}\r\n              >\r\n                {t(\"general.cancel\")}\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                disabled={disabled}\r\n              >\r\n                {t(\"general.save\")}\r\n              </Button>\r\n            </div>\r\n          </DialogActions>\r\n        </ValidatorForm>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Employee1EditDialog;\r\n"]},"metadata":{},"sourceType":"module"}