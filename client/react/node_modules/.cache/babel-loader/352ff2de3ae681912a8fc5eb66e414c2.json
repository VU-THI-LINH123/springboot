{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { PagerNumericButtons } from './PagerNumericButtons';\nimport { PagerInput } from './PagerInput';\nimport { PagerPageSizes } from './PagerPageSizes';\nimport { messages, pagerFirstPage, pagerLastPage, pagerNextPage, pagerPreviousPage, pagerInfo } from '../messages';\nimport { registerForIntl, registerForLocalization, provideLocalizationService, provideIntlService } from '@progress/kendo-react-intl';\nimport { classNames } from '@progress/kendo-react-common';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\n/**\n * @hidden\n */\n\nvar RESPONSIVE_BREAKPOINT_MEDIUM = 600;\n/**\n * @hidden\n */\n\nvar RESPONSIVE_BREAKPOINT_LARGE = 768;\n\nvar Pager =\n/** @class */\nfunction (_super) {\n  __extends(Pager, _super);\n\n  function Pager(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._element = null;\n\n    _this.changePage = function (page, event) {\n      if (_this.props.onPageChange && page > 0 && page <= _this.totalPages) {\n        _this.props.onPageChange({\n          target: _this,\n          skip: (page - 1) * _this.props.take,\n          take: _this.props.take,\n          syntheticEvent: event,\n          nativeEvent: event.nativeEvent\n        });\n      }\n    };\n\n    _this.onWindowResize = function () {\n      var element = _this.element;\n\n      if (!element) {\n        return;\n      }\n\n      var width = element.offsetWidth;\n\n      if (width < RESPONSIVE_BREAKPOINT_MEDIUM) {\n        element.classList.remove('k-pager-md');\n        element.classList.add('k-pager-sm');\n      } else if (width >= RESPONSIVE_BREAKPOINT_MEDIUM && width < RESPONSIVE_BREAKPOINT_LARGE) {\n        element.classList.add('k-pager-md');\n        element.classList.remove('k-pager-sm');\n      } else {\n        element.classList.remove('k-pager-md');\n        element.classList.remove('k-pager-sm');\n      }\n    };\n\n    validatePackage(packageMetadata);\n    return _this;\n  }\n\n  Object.defineProperty(Pager.prototype, \"element\", {\n    /**\n     * Returns the HTML element of the Pager component.\n     */\n    get: function get() {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  Pager.prototype.componentDidMount = function () {\n    window.addEventListener('resize', this.onWindowResize);\n    this.onWindowResize();\n  };\n  /**\n   * @hidden\n   */\n\n\n  Pager.prototype.componentWillUnmount = function () {\n    window.removeEventListener('resize', this.onWindowResize);\n  };\n  /**\n   * @hidden\n   */\n\n\n  Pager.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        skip = _a.skip,\n        take = _a.take,\n        total = _a.total,\n        pageSizes = _a.pageSizes,\n        messagesMap = _a.messagesMap;\n    var localizationService = provideLocalizationService(this);\n    var intlService = provideIntlService(this);\n    var currentPage = Math.floor(skip / take) + 1;\n    var changer = this.props.type === 'numeric' ? React.createElement(PagerNumericButtons, {\n      buttonCount: this.props.buttonCount || 0,\n      totalPages: this.totalPages,\n      currentPage: currentPage,\n      pageChange: this.changePage\n    }) : React.createElement(PagerInput, {\n      currentPage: currentPage,\n      totalPages: this.totalPages,\n      pageChange: this.changePage,\n      messagesMap: messagesMap\n    });\n    var firstPageMessage = messagesMap ? messagesMap(pagerFirstPage) : {\n      messageKey: pagerFirstPage,\n      defaultMessage: messages[pagerFirstPage]\n    };\n    var previousPageMessage = messagesMap ? messagesMap(pagerPreviousPage) : {\n      messageKey: pagerPreviousPage,\n      defaultMessage: messages[pagerPreviousPage]\n    };\n    var nextPageMessage = messagesMap ? messagesMap(pagerNextPage) : {\n      messageKey: pagerNextPage,\n      defaultMessage: messages[pagerNextPage]\n    };\n    var lastPageMessage = messagesMap ? messagesMap(pagerLastPage) : {\n      messageKey: pagerLastPage,\n      defaultMessage: messages[pagerLastPage]\n    };\n    var infoMessage = messagesMap ? messagesMap(pagerInfo) : {\n      messageKey: pagerInfo,\n      defaultMessage: messages[pagerInfo]\n    };\n    var first, prev, next, last;\n\n    if (this.props.previousNext) {\n      first = this.renderButton(1, 'k-link k-pager-nav k-pager-first' + (currentPage === 1 ? ' k-state-disabled' : ''), localizationService.toLanguageString(firstPageMessage.messageKey, firstPageMessage.defaultMessage), 'k-icon k-i-arrow-end-left');\n      prev = this.renderButton(currentPage - 1, 'k-link k-pager-nav' + (currentPage === 1 ? ' k-state-disabled' : ''), localizationService.toLanguageString(previousPageMessage.messageKey, previousPageMessage.defaultMessage), 'k-icon k-i-arrow-60-left');\n      next = this.renderButton(currentPage + 1, 'k-link k-pager-nav' + (currentPage >= this.totalPages ? ' k-state-disabled' : ''), localizationService.toLanguageString(nextPageMessage.messageKey, nextPageMessage.defaultMessage), 'k-icon k-i-arrow-60-right');\n      last = this.renderButton(this.totalPages, 'k-link k-pager-nav k-pager-last' + (currentPage >= this.totalPages ? ' k-state-disabled' : ''), localizationService.toLanguageString(lastPageMessage.messageKey, lastPageMessage.defaultMessage), 'k-icon k-i-arrow-end-right');\n    }\n\n    var pagerPageSizes = pageSizes && React.createElement(PagerPageSizes, {\n      pageChange: this.props.onPageChange,\n      pageSize: take,\n      pageSizes: pageSizes,\n      messagesMap: messagesMap\n    });\n    var info = this.props.info && React.createElement(\"div\", {\n      className: \"k-pager-info k-label\"\n    }, intlService.format(localizationService.toLanguageString(infoMessage.messageKey, infoMessage.defaultMessage), [Math.min(skip + 1, total), Math.min(skip + take, total), total]));\n    return React.createElement(\"div\", {\n      className: classNames('k-pager-wrap k-pager k-widget', this.props.className),\n      style: this.props.style,\n      role: \"navigation\",\n      ref: function ref(element) {\n        return _this._element = element;\n      }\n    }, first, prev, changer, next, last, pagerPageSizes, info);\n  };\n\n  Pager.prototype.renderButton = function (page, className, title, icon) {\n    var _this = this;\n\n    return React.createElement(\"a\", {\n      onClick: function onClick(e) {\n        e.preventDefault();\n\n        _this.changePage(page, e);\n      },\n      href: \"#\",\n      className: className,\n      title: title\n    }, React.createElement(\"span\", {\n      className: icon,\n      \"aria-label\": title\n    }));\n  };\n\n  Object.defineProperty(Pager.prototype, \"totalPages\", {\n    get: function get() {\n      return Math.ceil((this.props.total || 0) / this.props.take);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  Pager.propTypes = {\n    className: PropTypes.string,\n    style: PropTypes.object,\n    total: PropTypes.number.isRequired,\n    skip: PropTypes.number.isRequired,\n    take: PropTypes.number.isRequired,\n    buttonCount: PropTypes.number,\n    info: PropTypes.bool,\n    type: PropTypes.oneOf(['numeric', 'input']),\n    pageSizes: PropTypes.arrayOf(PropTypes.number),\n    previousNext: PropTypes.bool,\n    onPageChange: PropTypes.func,\n    messagesMap: PropTypes.func\n  };\n  /**\n   * @hidden\n   */\n\n  Pager.defaultProps = {\n    buttonCount: 10,\n    info: true,\n    type: 'numeric'\n  };\n  return Pager;\n}(React.Component);\n\nexport { Pager };\nregisterForIntl(Pager);\nregisterForLocalization(Pager);","map":null,"metadata":{},"sourceType":"module"}