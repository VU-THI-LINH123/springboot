{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Keys, dispatchEvent, guid } from '@progress/kendo-react-common';\nimport nav from './utils/getItemIdUponKeyboardNavigation';\nimport { resolveItemId, isEnabledAndAllParentsEnabled, hasChildren } from './utils/itemUtils';\nimport TreeViewItem from './TreeViewItem';\nimport { ZERO_LEVEL_ZERO_NODE_ID, getItemById } from './utils/itemIdUtils';\nimport FieldsService from './utils/FieldsService';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from './package-metadata';\n/**\n * Represents the [KendoReact TreeView component]({% slug overview_treeview %}).\n *\n * @example\n * ```jsx\n * const data = [{\n *     text: 'Furniture', expanded: true, items: [\n *         { text: 'Tables & Chairs' }, { text: 'Sofas' }, { text: 'Occasional Furniture' }]\n * }, {\n *     text: 'Decor', expanded: true, items: [\n *         { text: 'Bed Linen' }, { text: 'Curtains & Blinds' }, { text: 'Carpets' }]\n * }];\n * class App extends React.Component {\n *     render() {\n *         return <TreeView data={data} />;\n *     }\n * }\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nvar TreeView =\n/** @class */\nfunction (_super) {\n  __extends(TreeView, _super);\n\n  function TreeView(props) {\n    var _this = _super.call(this, props) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.state = {\n      focusedItemId: undefined,\n      focusedItemPublicId: undefined,\n      tabbableItemId: ZERO_LEVEL_ZERO_NODE_ID\n    }; // When there is a change in state.focusedItemId, calling focus() on the dom element of the focused item\n    // is most often not needed, because the browser focuses the element on its own.\n    // https://github.com/telerik/kendo-react/issues/190\n\n    _this.allowExplicitFocus = false;\n    _this.treeGuid = guid();\n    _this._element = null;\n\n    _this.onFocusDomElNeeded = function (domItem) {\n      if (_this.allowExplicitFocus) {\n        _this.focusDomItem(domItem);\n      }\n    };\n\n    _this.onCheckChange = function (event, item, itemId) {\n      _this.setFocus(itemId);\n\n      _this.dispatchCheckChange(event, item, itemId);\n    };\n\n    _this.onExpandChange = function (event, item, itemId) {\n      _this.setFocus(itemId);\n\n      _this.dispatchExpandChange(event, item, itemId);\n    };\n\n    _this.onPress = function (event, item, itemId) {\n      event.originalEvent.preventDefault();\n\n      if (_this.props.onItemDragStart) {\n        _this.props.onItemDragStart.call(undefined, {\n          target: _this,\n          item: item,\n          itemHierarchicalIndex: itemId\n        });\n      }\n    };\n\n    _this.onDrag = function (event, item, itemId) {\n      event.originalEvent.preventDefault();\n      var pageX = event.pageX,\n          pageY = event.pageY,\n          clientX = event.clientX,\n          clientY = event.clientY;\n\n      if (_this.props.onItemDragOver) {\n        _this.props.onItemDragOver.call(undefined, {\n          target: _this,\n          item: item,\n          itemHierarchicalIndex: itemId,\n          pageX: pageX,\n          pageY: pageY,\n          clientX: clientX,\n          clientY: clientY\n        });\n      }\n    };\n\n    _this.onRelease = function (event, item, itemId) {\n      var pageX = event.pageX,\n          pageY = event.pageY,\n          clientX = event.clientX,\n          clientY = event.clientY;\n\n      if (_this.props.onItemDragEnd) {\n        _this.props.onItemDragEnd.call(undefined, {\n          target: _this,\n          item: item,\n          itemHierarchicalIndex: itemId,\n          pageX: pageX,\n          pageY: pageY,\n          clientX: clientX,\n          clientY: clientY\n        });\n      }\n    };\n\n    _this.onItemClick = function (event, item, itemId) {\n      _this.setFocus(itemId);\n\n      _this.dispatchItemClick(event, item, itemId);\n    };\n\n    _this.onFocus = function () {\n      clearTimeout(_this.blurRequest);\n\n      if (_this.state.focusedItemId === undefined && _this.data.length) {\n        _this.setFocus(_this.state.tabbableItemId);\n      }\n    };\n\n    _this.onBlur = function () {\n      clearTimeout(_this.blurRequest);\n      _this.blurRequest = setTimeout(function () {\n        return _this.setFocus(undefined);\n      }, 0);\n    };\n\n    _this.onKeyDown = function (event) {\n      var focusedItem = _this.getFocusedItem();\n\n      if (focusedItem) {\n        var newItemId = nav(focusedItem, _this.state.focusedItemId, _this.data, event.keyCode, _this.fieldsSvc);\n\n        if (newItemId !== _this.state.focusedItemId) {\n          // This disables the auto-scroll. The scroll is achieved via item focusing.\n          event.preventDefault();\n          _this.allowExplicitFocus = true;\n\n          _this.setFocus(newItemId);\n        }\n\n        _this.dispatchEventsOnKeyDown(event, focusedItem);\n      }\n    };\n\n    validatePackage(packageMetadata);\n    return _this;\n  }\n\n  Object.defineProperty(TreeView.prototype, \"element\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  TreeView.prototype.render = function () {\n    var _this = this;\n\n    this.fieldsSvc = new FieldsService(this.props);\n    return React.createElement(\"div\", {\n      className: 'k-widget k-treeview' + (this.props.className ? ' ' + this.props.className : ''),\n      onKeyDown: this.onKeyDown,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      role: \"tree\",\n      \"aria-multiselectable\": this.ariaMultiSelectable ? true : undefined,\n      \"aria-label\": this.props['aria-label'],\n      \"aria-labelledby\": this.props['aria-labelledby'],\n      ref: function ref(element) {\n        return _this._element = element;\n      },\n      tabIndex: this.props.tabIndex\n    }, React.createElement(\"ul\", {\n      className: \"k-treeview-lines k-group\",\n      role: \"group\"\n    }, this.data.map(function (item, index) {\n      return React.createElement(TreeViewItem, {\n        item: item,\n        itemId: index.toString(),\n        treeGuid: _this.treeGuid,\n        animate: _this.props.animate,\n        focusedItemId: _this.state.focusedItemId,\n        tabbableItemId: _this.state.tabbableItemId,\n        fieldsService: _this.fieldsSvc,\n        itemUI: _this.props.item,\n        checkboxes: _this.props.checkboxes,\n        ariaMultiSelectable: _this.ariaMultiSelectable,\n        onItemClick: _this.onItemClick,\n        onFocusDomElNeeded: _this.onFocusDomElNeeded,\n        draggable: _this.props.draggable,\n        onPress: _this.onPress,\n        onDrag: _this.onDrag,\n        onRelease: _this.onRelease,\n        expandIcons: _this.props.expandIcons,\n        onExpandChange: _this.onExpandChange,\n        onCheckChange: _this.onCheckChange,\n        key: index\n      });\n    })));\n  };\n  /**\n   * @hidden\n   */\n\n\n  TreeView.prototype.componentDidUpdate = function () {\n    this.allowExplicitFocus = false;\n    this.refocusDueToFocusIdField();\n  };\n\n  TreeView.prototype.dispatchEventsOnKeyDown = function (event, focusedItem) {\n    var _this = this; // isEnabled is the most expensive op and that is why is left last.\n\n\n    var isEnabled = function isEnabled() {\n      return isEnabledAndAllParentsEnabled(_this.state.focusedItemId, _this.data, _this.fieldsSvc);\n    };\n\n    if (event.keyCode === Keys.left && this.fieldsSvc.expanded(focusedItem) && isEnabled()) {\n      this.dispatchExpandChange(event, focusedItem, this.state.focusedItemId);\n    } else if (event.keyCode === Keys.right && !this.fieldsSvc.expanded(focusedItem) && (this.fieldsSvc.hasChildren(focusedItem) || hasChildren(focusedItem)) && isEnabled()) {\n      this.dispatchExpandChange(event, focusedItem, this.state.focusedItemId);\n    } else if (event.keyCode === Keys.enter && isEnabled()) {\n      this.dispatchItemClick(event, focusedItem, this.state.focusedItemId);\n    } else if (event.keyCode === Keys.space && isEnabled()) {\n      // W/o preventDefault() long TreeViews gets incorrectly scrolled.\n      event.preventDefault();\n      this.dispatchCheckChange(event, focusedItem, this.state.focusedItemId);\n    }\n  };\n\n  TreeView.prototype.setFocus = function (focusedItemId) {\n    if (focusedItemId) {\n      if (this.fieldsSvc.focusIdField) {\n        var item = this.getItemById(focusedItemId);\n        this.setState({\n          focusedItemId: focusedItemId,\n          focusedItemPublicId: this.fieldsSvc.focusId(item)\n        });\n      } else {\n        this.setState({\n          focusedItemId: focusedItemId\n        });\n      }\n    } else {\n      this.setState(function (state) {\n        return {\n          focusedItemId: undefined,\n          focusedItemPublicId: undefined,\n          tabbableItemId: state.focusedItemId\n        };\n      });\n    }\n  };\n\n  TreeView.prototype.getFocusedItem = function () {\n    return this.state.focusedItemId ? this.getItemById(this.state.focusedItemId) : undefined;\n  };\n\n  TreeView.prototype.getItemById = function (itemId) {\n    return getItemById(itemId, this.data);\n  };\n\n  TreeView.prototype.dispatchCheckChange = function (dispatchedEvent, item, itemId) {\n    dispatchEvent(this.props.onCheckChange, dispatchedEvent, this, {\n      item: item,\n      itemHierarchicalIndex: itemId\n    });\n  };\n\n  TreeView.prototype.dispatchExpandChange = function (dispatchedEvent, item, itemId) {\n    dispatchEvent(this.props.onExpandChange, dispatchedEvent, this, {\n      item: item,\n      itemHierarchicalIndex: itemId\n    });\n  };\n\n  TreeView.prototype.dispatchItemClick = function (dispatchedEvent, item, itemId) {\n    dispatchEvent(this.props.onItemClick, dispatchedEvent, this, {\n      item: item,\n      itemHierarchicalIndex: itemId\n    });\n  };\n\n  TreeView.prototype.refocusDueToFocusIdField = function () {\n    if (this.fieldsSvc.focusIdField) {\n      var focusedItemPublicId = this.state.focusedItemPublicId;\n\n      if (focusedItemPublicId) {\n        var focusedItemId = this.props.getFocusHierarchicalIndex ? this.props.getFocusHierarchicalIndex(focusedItemPublicId) : resolveItemId(focusedItemPublicId, this.fieldsSvc.focusIdField, this.data);\n\n        if (focusedItemId !== this.state.focusedItemId) {\n          this.allowExplicitFocus = true;\n          this.setState({\n            focusedItemId: focusedItemId\n          });\n        }\n      }\n    }\n  };\n\n  Object.defineProperty(TreeView.prototype, \"ariaMultiSelectable\", {\n    get: function get() {\n      return this.props['aria-multiselectable'] === true || this.props['aria-multiselectable'] === 'true';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeView.prototype, \"data\", {\n    get: function get() {\n      return this.props.data || [];\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TreeView.prototype.focusDomItem = function (domItem) {\n    domItem.focus();\n  };\n\n  Object.defineProperty(TreeView.prototype, \"guid\", {\n    /**\n     * Returns the `guid` which is associated with the TreeView.\n     */\n    get: function get() {\n      return this.treeGuid;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  TreeView.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.any),\n    animate: PropTypes.bool,\n    tabIndex: PropTypes.number,\n    focusIdField: PropTypes.string,\n    getHierarchicalIndexById: PropTypes.func,\n    onExpandChange: PropTypes.func,\n    onItemClick: PropTypes.func,\n    expandField: PropTypes.string,\n    selectField: PropTypes.string,\n    hasChildrenField: PropTypes.string,\n    textField: PropTypes.string,\n    disableField: PropTypes.string,\n    item: PropTypes.any,\n    'aria-multiselectable': PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['false', 'true'])]),\n    'aria-label': PropTypes.string,\n    'aria-labelledby': PropTypes.string\n  };\n  /**\n   * @hidden\n   */\n\n  TreeView.defaultProps = {\n    animate: true\n  };\n  return TreeView;\n}(React.Component);\n\nexport default TreeView;","map":null,"metadata":{},"sourceType":"module"}