{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { isCompositeFilterDescriptor } from '@progress/kendo-data-query';\nimport { Button, Toolbar, ToolbarItem, ButtonGroup } from '@progress/kendo-react-buttons';\nimport { provideLocalizationService, registerForLocalization } from '@progress/kendo-react-intl';\nimport { Expression } from './Expression';\nimport { stringOperator } from './operators';\nimport { messages, filterAndLogic, filterOrLogic, filterAddExpression, filterAddGroup, filterClose } from '../messages';\n/**\n * @hidden\n */\n\nvar Group =\n/** @class */\nfunction (_super) {\n  __extends(Group, _super);\n\n  function Group() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.onGroupRemove = function () {\n      _this.props.onRemove.call(undefined, {\n        filter: _this.props.filter\n      });\n    };\n\n    _this.onAddExpression = function () {\n      var prevFilter = _this.props.filter;\n      var firstField = _this.props.fields[0];\n      var newExpression = {\n        field: firstField.name,\n        operator: firstField.operators[0].operator\n      };\n      newExpression.value = stringOperator(newExpression.operator) ? '' : null;\n\n      _this.props.onChange.call(undefined, {\n        nextFilter: __assign({}, prevFilter, {\n          filters: prevFilter.filters.concat([newExpression])\n        }),\n        prevFilter: prevFilter\n      });\n    };\n\n    _this.onAddGroup = function () {\n      var prevFilter = _this.props.filter;\n\n      _this.props.onChange.call(undefined, {\n        nextFilter: __assign({}, prevFilter, {\n          filters: prevFilter.filters.concat([__assign({}, _this.props.defaultGroupFilter)])\n        }),\n        prevFilter: prevFilter\n      });\n    };\n\n    _this.onLogicAnd = function () {\n      return _this.changeLogic('and');\n    };\n\n    _this.onLogicOr = function () {\n      return _this.changeLogic('or');\n    };\n\n    _this.changeLogic = function (logic) {\n      var prevFilter = _this.props.filter;\n\n      if (prevFilter.logic !== logic) {\n        _this.props.onChange.call(undefined, {\n          nextFilter: __assign({}, prevFilter, {\n            logic: logic\n          }),\n          prevFilter: prevFilter\n        });\n      }\n    };\n\n    _this.replaceFilter = function (prevFilter, nextFilter) {\n      var filter = _this.props.filter;\n      var filters = filter.filters.map(function (f) {\n        return f === prevFilter ? nextFilter : f;\n      });\n      return __assign({}, filter, {\n        filters: filters\n      });\n    };\n\n    _this.onChange = function (event) {\n      var nextFilter = _this.replaceFilter(event.prevFilter, event.nextFilter);\n\n      var changeEvent = {\n        nextFilter: nextFilter,\n        prevFilter: _this.props.filter,\n        syntheticEvent: event.syntheticEvent,\n        nativeEvent: event.nativeEvent,\n        target: _this\n      };\n\n      _this.props.onChange.call(undefined, changeEvent);\n    };\n\n    _this.onRemove = function (event) {\n      var prevFilter = _this.props.filter;\n      var filters = prevFilter.filters.filter(function (f) {\n        return f !== event.filter;\n      });\n      var changeEvent = {\n        nextFilter: __assign({}, prevFilter, {\n          filters: filters\n        }),\n        prevFilter: prevFilter,\n        syntheticEvent: event.syntheticEvent,\n        nativeEvent: event.nativeEvent,\n        target: _this\n      };\n\n      _this.props.onChange.call(undefined, changeEvent);\n    };\n\n    return _this;\n  }\n\n  Group.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        fields = _a.fields,\n        filter = _a.filter;\n    var locService = provideLocalizationService(this);\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"k-filter-toolbar\"\n    }, React.createElement(Toolbar, {\n      keyboardNavigation: false\n    }, React.createElement(ToolbarItem, null, React.createElement(ButtonGroup, null, React.createElement(Button, {\n      togglable: true,\n      onClick: this.onLogicAnd,\n      selected: filter.logic === 'and'\n    }, locService.toLanguageString(filterAndLogic, messages[filterAndLogic])), React.createElement(Button, {\n      togglable: true,\n      onClick: this.onLogicOr,\n      selected: filter.logic === 'or'\n    }, locService.toLanguageString(filterOrLogic, messages[filterOrLogic])))), React.createElement(ToolbarItem, null, React.createElement(Button, {\n      title: locService.toLanguageString(filterAddExpression, messages[filterAddExpression]),\n      icon: \"filter-add-expression\",\n      onClick: this.onAddExpression\n    })), React.createElement(ToolbarItem, null, React.createElement(Button, {\n      title: locService.toLanguageString(filterAddGroup, messages[filterAddGroup]),\n      icon: \"filter-add-group\",\n      onClick: this.onAddGroup\n    })), React.createElement(ToolbarItem, null, React.createElement(Button, {\n      title: locService.toLanguageString(filterClose, messages[filterClose]),\n      icon: \"close\",\n      look: \"flat\",\n      onClick: this.onGroupRemove\n    })))), filter.filters.length > 0 && React.createElement(\"ul\", {\n      className: \"k-filter-lines\"\n    }, filter.filters.map(function (f, idx) {\n      return React.createElement(\"li\", {\n        key: idx,\n        className: \"k-filter-item\"\n      }, isCompositeFilterDescriptor(f) ? React.createElement(Group, {\n        filter: f,\n        fields: fields,\n        onChange: _this.onChange,\n        onRemove: _this.onRemove,\n        defaultGroupFilter: _this.props.defaultGroupFilter\n      }) : React.createElement(Expression, {\n        filter: f,\n        fields: fields,\n        onChange: _this.onChange,\n        onRemove: _this.onRemove\n      }));\n    })));\n  };\n\n  Group.propTypes = {\n    filter: PropTypes.object.isRequired,\n    fields: PropTypes.array.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onRemove: PropTypes.func.isRequired,\n    defaultGroupFilter: PropTypes.object.isRequired\n  };\n  return Group;\n}(React.Component);\n\nexport { Group };\nregisterForLocalization(Group);","map":null,"metadata":{},"sourceType":"module"}