{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames } from '@progress/kendo-react-common';\nimport { provideLocalizationService, registerForLocalization } from '@progress/kendo-react-intl';\nimport { labelsOptional, messages } from './messages';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from './package-metadata';\n/**\n * Represents the KendoReact FloatingLabel component.\n * @example\n * ```jsx\n * const sizes = [\"X-Small\", \"Small\", \"Medium\", \"Large\", \"X-Large\", \"2X-Large\"];\n * const App = () => {\n *     const [ddlState, setDdlState] = React.useState();\n *     const editorId = 'ddl-sizes';\n *     return (\n *         <FloatingLabel label={'Shirt Size:'} editorId={editorId} editorValue={ddlState}>\n *             <DropDownList\n *                 id={editorId}\n *                 value={ddlState}\n *                 data={sizes}\n *                 onChange={(e) => setDdlState(e.target.value)}\n *             />\n *         </FloatingLabel>\n *     );\n * };\n *\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nvar FloatingLabel =\n/** @class */\nfunction (_super) {\n  __extends(FloatingLabel, _super);\n\n  function FloatingLabel(props) {\n    var _this = _super.call(this, props) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.state = {\n      focused: false\n    };\n    /**\n     * @hidden\n     */\n\n    _this.handleFocus = function (_) {\n      _this.setState({\n        focused: true\n      });\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.handleBlur = function (_) {\n      _this.setState({\n        focused: false\n      });\n    };\n\n    validatePackage(packageMetadata);\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  FloatingLabel.prototype.render = function () {\n    var _a = this.props,\n        label = _a.label,\n        editorId = _a.editorId,\n        className = _a.className,\n        editorValue = _a.editorValue,\n        editorPlaceholder = _a.editorPlaceholder,\n        editorValid = _a.editorValid,\n        editorDisabled = _a.editorDisabled,\n        style = _a.style,\n        id = _a.id,\n        optional = _a.optional;\n    var localizationService = provideLocalizationService(this);\n    var localizedOptional = optional ? localizationService.toLanguageString(labelsOptional, messages[labelsOptional]) : '';\n    var optionalElement = localizedOptional && React.createElement(\"span\", {\n      className: 'k-label-optional'\n    }, localizedOptional);\n    var spanClassNames = classNames({\n      'k-textbox-container': true,\n      'k-state-focused': this.state.focused,\n      'k-state-empty': !(editorValue && editorValue !== 0 || editorPlaceholder),\n      'k-text-disabled': editorDisabled,\n      'k-rtl': this.props.dir === 'rtl'\n    }, className);\n    var labelClassNames = classNames({\n      'k-label': true,\n      'k-text-error': editorValid === false,\n      'k-text-disabled': editorDisabled\n    });\n    return React.createElement(\"span\", {\n      className: spanClassNames,\n      onFocus: this.handleFocus,\n      onBlur: this.handleBlur,\n      style: style,\n      dir: this.props.dir\n    }, this.props.children, label ? editorId ? React.createElement(\"label\", {\n      id: id,\n      htmlFor: editorId,\n      className: labelClassNames\n    }, label, optionalElement) : React.createElement(\"span\", {\n      id: id,\n      className: labelClassNames\n    }, label, optionalElement) : null);\n  };\n  /**\n   * @hidden\n   */\n\n\n  FloatingLabel.propTypes = {\n    label: PropTypes.string,\n    editorId: PropTypes.string,\n    editorValue: PropTypes.string,\n    editorPlaceholder: PropTypes.string,\n    editorValid: PropTypes.bool,\n    editorDisabled: PropTypes.bool,\n    id: PropTypes.string,\n    style: PropTypes.object,\n    className: PropTypes.string,\n    optional: PropTypes.bool\n  };\n  return FloatingLabel;\n}(React.Component);\n\nexport { FloatingLabel };\nregisterForLocalization(FloatingLabel);","map":null,"metadata":{},"sourceType":"module"}