{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\n/**\n * @hidden\n */\n\nexport var createFilterCell = function createFilterCell(settings) {\n  var Cell =\n  /** @class */\n  function (_super) {\n    __extends(FilterCell, _super);\n\n    function FilterCell() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n\n      _this.filterChange = function (event) {\n        if (_this.props.onFilterChange) {\n          _this.props.onFilterChange(event);\n        }\n      };\n\n      _this.inputChange = function (e) {\n        var value = e.target.value;\n        var _a = _this.props,\n            _b = _a.filter,\n            filter = _b === void 0 ? [] : _b,\n            _c = _a.field,\n            field = _c === void 0 ? '' : _c;\n\n        var existing = _this.findCellFilter();\n\n        var filterResult = existing ? filter.map(function (f) {\n          return f.field === field ? __assign({}, existing, {\n            value: value\n          }) : f;\n        }) : filter.concat([__assign({}, settings.emptyFilter, {\n          value: value,\n          field: field\n        })]);\n\n        _this.filterChange({\n          filter: filterResult,\n          field: field,\n          syntheticEvent: e.syntheticEvent\n        });\n      };\n\n      _this.operatorChange = function (e) {\n        var operator = e.target.value.operator;\n        var _a = _this.props,\n            _b = _a.filter,\n            filter = _b === void 0 ? [] : _b,\n            _c = _a.field,\n            field = _c === void 0 ? '' : _c;\n\n        var existing = _this.findCellFilter();\n\n        var filterResult = existing ? filter.map(function (f) {\n          return f.field === field ? __assign({}, existing, {\n            operator: operator\n          }) : f;\n        }) : filter.concat([__assign({}, settings.emptyFilter, {\n          field: field,\n          operator: operator\n        })]);\n\n        _this.filterChange({\n          filter: filterResult,\n          field: field,\n          syntheticEvent: e.syntheticEvent\n        });\n      };\n\n      _this.clearButtonClick = function (e) {\n        var _a = _this.props,\n            _b = _a.filter,\n            filter = _b === void 0 ? [] : _b,\n            _c = _a.field,\n            field = _c === void 0 ? '' : _c;\n\n        _this.filterChange({\n          filter: filter.filter(function (f) {\n            return f.field !== field;\n          }),\n          field: field,\n          syntheticEvent: e\n        });\n      };\n\n      _this.findCellFilter = function () {\n        var _a = _this.props,\n            _b = _a.filter,\n            filter = _b === void 0 ? [] : _b,\n            field = _a.field;\n        return filter.find(function (f) {\n          return f.field === field;\n        });\n      };\n\n      return _this;\n    }\n\n    FilterCell.prototype.render = function () {\n      var _a = this.props,\n          _b = _a.clearButtonTitle,\n          clearButtonTitle = _b === void 0 ? '' : _b,\n          _c = _a.operators,\n          operators = _c === void 0 ? [] : _c;\n\n      var filter = this.findCellFilter() || __assign({}, settings.emptyFilter, {\n        operator: ''\n      });\n\n      var operator = filter.operator,\n          value = filter.value;\n      var operatorComponentProps = {\n        value: operators.find(function (item) {\n          return item.operator === operator;\n        }) || null,\n        onChange: this.operatorChange,\n        className: 'k-dropdown-operator',\n        iconClassName: 'k-i-filter k-icon',\n        data: operators,\n        textField: 'text',\n        popupSettings: {\n          width: ''\n        },\n        components: this.props.components\n      };\n      return React.createElement(\"div\", {\n        className: \"k-filtercell\"\n      }, React.createElement(\"div\", {\n        className: \"k-filtercell-wrapper\"\n      }, settings.inputComponent({\n        value: value,\n        onChange: this.inputChange,\n        components: this.props.components\n      }), React.createElement(\"div\", {\n        className: \"k-filtercell-operator\"\n      }, settings.operatorComponent(operatorComponentProps, this.props), React.createElement(\"button\", {\n        className:\n        /* button is always visible if there is either value or operator */\n        !(value === null || value === '') || operator ? 'k-button k-button-icon k-clear-button-visible' : 'k-button k-button-icon',\n        title: clearButtonTitle,\n        type: \"button\",\n        onClick: this.clearButtonClick\n      }, React.createElement(\"span\", {\n        className: \"k-icon k-i-filter-clear\"\n      })))));\n    };\n\n    return FilterCell;\n  }(React.Component);\n\n  return Cell;\n};","map":null,"metadata":{},"sourceType":"module"}