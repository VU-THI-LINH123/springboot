{"ast":null,"code":"import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames } from '@progress/kendo-react-common';\nimport { labelsOptional, messages } from './messages';\nimport { useLocalization } from '@progress/kendo-react-intl';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from './package-metadata';\n/**\n * Represents the KendoReact Label component.\n * @example\n * ```jsx\n * const sizes = [\"X-Small\", \"Small\", \"Medium\", \"Large\", \"X-Large\", \"2X-Large\"];\n * const App = () => {\n *     const ddlRef = React.useRef(null);\n *     const labelId = 'ddl-sizes-label';\n *     const editorId = 'ddl-sizes';\n *\n *     return (\n *         <div>\n *             <Label id={labelId} editorId={editorId} editorRef={ddlRef}>\n *                 Shirt Size:\n *             </Label>\n *             <DropDownList\n *                 ref={ddlRef}\n *                 id={editorId}\n *                 ariaLabelledBy={labelId}\n *                 data={sizes}\n *             />\n *             <br />\n *         </div>\n *     );\n * };\n *\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nexport var Label = function Label(props) {\n  validatePackage(packageMetadata);\n  var id = props.id,\n      editorId = props.editorId,\n      editorRef = props.editorRef,\n      editorDisabled = props.editorDisabled,\n      children = props.children,\n      editorValid = props.editorValid,\n      style = props.style,\n      className = props.className,\n      optional = props.optional;\n  var localizationService = useLocalization();\n  var localizedOptional = optional ? localizationService.toLanguageString(labelsOptional, messages[labelsOptional]) : '';\n  var optionalElement = localizedOptional && React.createElement(\"span\", {\n    className: 'k-label-optional'\n  }, localizedOptional);\n  var onLabelClick = React.useCallback(function (e) {\n    if (editorRef && editorRef.current && !editorDisabled) {\n      if (editorRef.current.focus) {\n        e.preventDefault();\n        editorRef.current.focus();\n      }\n\n      var editorActionElement = editorRef.current.actionElement;\n\n      if (editorActionElement) {\n        e.preventDefault();\n        editorActionElement.click();\n      }\n    }\n  }, [editorRef]);\n  var labelClassName = classNames({\n    'k-label': true,\n    'k-label-empty': !children,\n    'k-text-error': editorValid === false,\n    'k-text-disabled': editorDisabled === true\n  }, className);\n  return React.createElement(\"label\", {\n    id: id,\n    htmlFor: editorId,\n    onClick: onLabelClick,\n    style: style,\n    className: labelClassName\n  }, children, optionalElement);\n};\nLabel.propTypes = {\n  id: PropTypes.string,\n  editorId: PropTypes.string,\n  editorRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.any\n  })]),\n  editorValid: PropTypes.bool,\n  editorDisabled: PropTypes.bool,\n  style: PropTypes.object,\n  className: PropTypes.string,\n  optional: PropTypes.bool\n};\nLabel.displayName = 'KendoReactLabel';","map":null,"metadata":{},"sourceType":"module"}