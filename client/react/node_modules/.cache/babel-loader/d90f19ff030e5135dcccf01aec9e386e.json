{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { classNames, guid, useDir, dispatchEvent, Keys, getTabIndex } from '@progress/kendo-react-common';\nimport { FloatingActionButtonItem } from './FloatingActionButtonItem';\nimport { packageMetadata } from '../package-metadata';\nimport { position, getAnchorAlign, getPopupAlign, getTextDirectionClass } from './utils';\nimport { Popup } from '@progress/kendo-react-popup';\n/**\n * Represents the [KendoReact FloatingActionButton component]({% slug overview_floatingactionbutton %}).\n *\n * @example\n * ```jsx\n * const App = () => {\n *   return (\n *     <FloatingActionButton icon=\"plus\" text=\"Create\"/>\n *   );\n * };\n *    ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nexport var FloatingActionButton = React.forwardRef(function (props, ref) {\n  validatePackage(packageMetadata);\n\n  var _a = props.align,\n      align = _a === void 0 ? defaultProps.align : _a,\n      alignOffset = props.alignOffset,\n      className = props.className,\n      disabled = props.disabled,\n      icon = props.icon,\n      iconClass = props.iconClass,\n      id = props.id,\n      items = props.items,\n      item = props.item,\n      text = props.text,\n      _b = props.positionMode,\n      positionMode = _b === void 0 ? defaultProps.positionMode : _b,\n      _c = props.shape,\n      shape = _c === void 0 ? defaultProps.shape : _c,\n      _d = props.size,\n      size = _d === void 0 ? defaultProps.size : _d,\n      style = props.style,\n      _e = props.themeColor,\n      themeColor = _e === void 0 ? defaultProps.themeColor : _e,\n      tabIndex = props.tabIndex,\n      accessKey = props.accessKey,\n      _f = props.popupSettings,\n      popupSettings = _f === void 0 ? {} : _f,\n      onClick = props.onClick,\n      onItemClick = props.onItemClick,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      onKeyDown = props.onKeyDown,\n      onOpen = props.onOpen,\n      onClose = props.onClose,\n      others = __rest(props, [\"align\", \"alignOffset\", \"className\", \"disabled\", \"icon\", \"iconClass\", \"id\", \"items\", \"item\", \"text\", \"positionMode\", \"shape\", \"size\", \"style\", \"themeColor\", \"tabIndex\", \"accessKey\", \"popupSettings\", \"onClick\", \"onItemClick\", \"onFocus\", \"onBlur\", \"onKeyDown\", \"onOpen\", \"onClose\"]);\n\n  var target = React.useRef(null);\n  var elementRef = React.useRef(null);\n  var listRef = React.useRef(null);\n  var popupRef = React.useRef(null);\n  var focusElement = React.useCallback(function () {\n    if (elementRef.current) {\n      elementRef.current.focus();\n    }\n  }, []);\n  var getImperativeHandle = React.useCallback(function () {\n    return {\n      element: elementRef.current,\n      focus: focusElement\n    };\n  }, [focusElement]);\n  React.useImperativeHandle(target, getImperativeHandle);\n  React.useImperativeHandle(ref, function () {\n    return target.current;\n  });\n\n  var _g = React.useState(false),\n      open = _g[0],\n      setOpen = _g[1];\n\n  var _h = React.useState(false),\n      focused = _h[0],\n      setFocused = _h[1];\n\n  var _j = React.useState(-1),\n      focusedIndex = _j[0],\n      setFocusedIndex = _j[1];\n\n  var buttonId = React.useMemo(function () {\n    return guid();\n  }, []);\n  var dir = useDir(elementRef, props.dir);\n  var isRtl = dir === 'rtl';\n  var listId = React.useMemo(function () {\n    return guid();\n  }, []);\n  React.useEffect(function () {\n    position(elementRef, align, alignOffset, isRtl);\n  }, [elementRef, align, alignOffset, isRtl]);\n  React.useEffect(function () {\n    if (focused && elementRef && elementRef.current) {\n      // firefox in mac does not focus on mouse-down, next line fixes this\n      elementRef.current.focus();\n    }\n  }, [focused, elementRef]);\n  var dispatchPopupEvent = React.useCallback(function (dispatchedEvent, isOpen) {\n    if (!items) {\n      return;\n    }\n\n    dispatchEvent(isOpen ? onOpen : onClose, dispatchedEvent, getImperativeHandle(), undefined);\n  }, [onOpen, onClose, items]);\n  var handleClick = React.useCallback(function (event) {\n    if (!event.target || disabled) {\n      return;\n    }\n\n    if (!items && onClick) {\n      dispatchEvent(onClick, event, getImperativeHandle(), undefined);\n    } else {\n      setOpen(!open);\n      setFocused(true);\n      setFocusedIndex(!open ? 0 : -1);\n      dispatchPopupEvent(event, !open);\n    }\n  }, [setOpen, setFocused, setFocusedIndex, onClick, dispatchPopupEvent, open, items, disabled]);\n  var handleFocus = React.useCallback(function (event) {\n    setFocused(true);\n    setFocusedIndex(open ? 0 : -1);\n\n    if (onFocus) {\n      dispatchEvent(onFocus, event, getImperativeHandle(), undefined);\n    }\n  }, [onFocus, setFocused, setFocusedIndex]);\n  var handleBlur = React.useCallback(function (event) {\n    setFocused(false);\n    setOpen(false);\n    setFocusedIndex(-1);\n    dispatchEvent(onBlur, event, getImperativeHandle(), undefined);\n    var fireCloseEvent = open;\n\n    if (fireCloseEvent) {\n      dispatchPopupEvent(event, false);\n    }\n  }, [onBlur, setFocused, setOpen, setFocusedIndex, dispatchPopupEvent]);\n  var handleMouseDown = React.useCallback(function (event) {\n    event.preventDefault();\n  }, []);\n  var dispatchItemClickEvent = React.useCallback(function (dispatchedEvent, index) {\n    if (!items) {\n      return;\n    }\n\n    if (!items[index].disabled) {\n      dispatchEvent(onItemClick, dispatchedEvent, getImperativeHandle(), {\n        itemProps: items[index],\n        itemIndex: index\n      });\n    }\n  }, [onItemClick]);\n  var handleItemClick = React.useCallback(function (event, clickedItemIndex) {\n    if (!event.target || !items) {\n      return;\n    }\n\n    setFocusedIndex(clickedItemIndex);\n    setOpen(false);\n    dispatchItemClickEvent(event, clickedItemIndex);\n    dispatchPopupEvent(event, false);\n  }, [setFocusedIndex, setOpen, dispatchItemClickEvent, dispatchPopupEvent]);\n  var handleItemDown = React.useCallback(function (event) {\n    if (document.activeElement === elementRef.current) {\n      event.preventDefault();\n    }\n  }, [elementRef, document.activeElement]);\n  var handleKeyDown = React.useCallback(function (event) {\n    var currIndex = focusedIndex;\n    var maxNavIndex = items ? items.length - 1 : -1;\n    var isAtBottom = align.vertical === 'bottom';\n\n    switch (event.keyCode) {\n      case Keys.enter:\n      case Keys.space:\n        if (currIndex >= 0) {\n          dispatchItemClickEvent(event, currIndex);\n        }\n\n        event.preventDefault();\n        setOpen(!open);\n        setFocusedIndex(!open ? 0 : -1);\n        break;\n\n      case Keys.esc:\n        event.preventDefault();\n        setOpen(false);\n        setFocusedIndex(-1);\n        break;\n\n      case Keys.home:\n        event.preventDefault();\n        setFocusedIndex(0);\n        break;\n\n      case Keys.end:\n        event.preventDefault();\n        setFocusedIndex(maxNavIndex);\n        break;\n\n      case Keys.down:\n      case Keys.right:\n        event.preventDefault();\n\n        if (currIndex < maxNavIndex && !isAtBottom) {\n          setFocusedIndex(currIndex + 1);\n        }\n\n        if (currIndex > 0 && isAtBottom) {\n          setFocusedIndex(currIndex - 1);\n        }\n\n        break;\n\n      case Keys.up:\n      case Keys.left:\n        event.preventDefault();\n\n        if (currIndex > 0 && !isAtBottom) {\n          setFocusedIndex(currIndex - 1);\n        }\n\n        if (currIndex < maxNavIndex && isAtBottom) {\n          setFocusedIndex(currIndex + 1);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    dispatchEvent(onKeyDown, event, getImperativeHandle(), undefined);\n  }, [onKeyDown, focusedIndex, setFocusedIndex, isRtl, setOpen]);\n  var buttonClassNames = React.useMemo(function () {\n    return classNames('k-fab', \"k-fab-\" + themeColor, \"k-fab-\" + shape, {\n      'k-fab-sm': size === 'small',\n      'k-fab-md': size === 'medium',\n      'k-fab-lg': size === 'large',\n      'k-state-disabled': disabled,\n      'k-pos-absolute': positionMode === 'absolute',\n      'k-pos-fixed': positionMode === 'fixed',\n      'k-state-focus': focused\n    }, \"k-\" + align.vertical + \"-\" + align.horizontal, className);\n  }, [themeColor, size, shape, disabled, positionMode, align, focused, className]);\n  var fabItems = items && items.map(function (element, index) {\n    return React.createElement(FloatingActionButtonItem, __assign({}, element, {\n      key: index,\n      index: index,\n      id: listId + \"-\" + index,\n      disabled: disabled || element.disabled,\n      focused: focusedIndex === index,\n      dataItem: element,\n      item: item,\n      className: classNames(element.className, getTextDirectionClass(dir || 'ltr', align.horizontal)),\n      onClick: handleItemClick,\n      onDown: handleItemDown\n    }));\n  });\n  var isIconFab = icon && !text;\n  var fabWidth = elementRef.current ? elementRef.current.offsetWidth : 0;\n  var iconWidth = 32;\n  var spacing = fabWidth / 2 - iconWidth / 2;\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", __assign({\n    ref: elementRef,\n    id: id || buttonId,\n    role: items ? 'menubutton' : 'button',\n    type: 'button',\n    \"aria-disabled\": disabled,\n    \"aria-expanded\": items ? open : undefined,\n    \"aria-haspopup\": items ? true : false,\n    \"aria-label\": (text || '') + \" floatingactionbutton\",\n    \"aria-owns\": items ? listId : undefined,\n    \"aria-activedescendant\": focusedIndex >= 0 && items ? listId + \"-\" + focusedIndex : undefined,\n    tabIndex: getTabIndex(tabIndex, disabled),\n    accessKey: accessKey,\n    dir: dir,\n    disabled: disabled,\n    className: buttonClassNames,\n    style: style,\n    onClick: handleClick,\n    onMouseDown: handleMouseDown,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onKeyDown: handleKeyDown\n  }, others), icon ? React.createElement(\"span\", {\n    role: \"presentation\",\n    className: classNames(\"k-fab-icon k-icon k-i-\" + icon)\n  }) : iconClass ? React.createElement(\"span\", {\n    role: \"presentation\",\n    className: iconClass\n  }) : null, text && React.createElement(\"span\", {\n    className: \"k-fab-text\"\n  }, text)), React.createElement(Popup, {\n    ref: popupRef,\n    anchor: elementRef.current,\n    show: open,\n    animate: popupSettings.animate,\n    popupClass: classNames('k-popup-transparent k-fab-popup', popupSettings.popupClass),\n    anchorAlign: popupSettings.anchorAlign || getAnchorAlign(align, isRtl),\n    popupAlign: popupSettings.popupAlign || getPopupAlign(align, isRtl),\n    style: {\n      boxShadow: 'none'\n    }\n  }, React.createElement(\"ul\", {\n    ref: listRef,\n    role: 'menu',\n    \"aria-labelledby\": id,\n    id: listId,\n    className: classNames('k-fab-items', {\n      'k-fab-items-bottom': align.vertical !== 'bottom',\n      'k-fab-items-top': align.vertical === 'bottom'\n    }),\n    style: {\n      paddingLeft: isIconFab ? spacing : undefined,\n      paddingRight: isIconFab ? spacing : undefined\n    }\n  }, fabItems)));\n});\nFloatingActionButton.propTypes = {\n  className: PropTypes.string,\n  style: PropTypes.object,\n  id: PropTypes.string,\n  dir: PropTypes.string,\n  tabIndex: PropTypes.number,\n  accessKey: PropTypes.string,\n  disabled: PropTypes.bool,\n  icon: PropTypes.string,\n  iconClass: PropTypes.string,\n  text: PropTypes.string,\n  alignOffset: PropTypes.shape({\n    x: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    y: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n  }),\n  align: PropTypes.shape({\n    vertical: PropTypes.oneOf(['top', 'middle', 'bottom']),\n    horizontal: PropTypes.oneOf(['start', 'center', 'end'])\n  }),\n  positionMode: PropTypes.oneOf(['absolute', 'fixed']),\n  shape: PropTypes.oneOf(['rectangle', 'rounded', 'pill']),\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  themeColor: PropTypes.oneOf(['primary', 'secondary', 'tertiary', 'info', 'success', 'warning', 'error', 'dark', 'light', 'inverse'])\n};\nvar defaultProps = {\n  align: {\n    vertical: 'bottom',\n    horizontal: 'end'\n  },\n  shape: 'pill',\n  size: 'medium',\n  themeColor: 'primary',\n  positionMode: 'fixed'\n};\nFloatingActionButton.displayName = 'KendoFloatingActionButton';","map":null,"metadata":{},"sourceType":"module"}