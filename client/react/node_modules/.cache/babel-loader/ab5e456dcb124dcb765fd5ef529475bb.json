{"ast":null,"code":"var __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { getAllDirectIndirectChildrenIds, areAllDirectChildrenChecked, getAllParents } from './utils/itemUtils';\nimport { getDirectParentId, getItemById } from './utils/itemIdUtils';\nimport { isArray, getNestedValue } from './utils/misc';\n/**\n * A helper function which updates the check descriptor.\n *\n * @param event - The event that triggered the change.\n * @param check - The check descriptor that will be updated.\n * @param data - The TreeView items.\n * @param settings - The additional settings that configure the update of the check descriptor.\n * The default behavior allows the selection of multiple items.\n * @returns - The updated copy of the input check descriptor.\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *    state = { check: [], items: tree };\n *    render() {\n *        return (\n *            <div>\n *                <TreeView\n *                    checkboxes={true} onCheckChange={this.onCheckChange}\n *                    data={processTreeViewItems(this.state.items, { check: this.state.check })}\n *                />\n *                <div style={{ marginTop: 5 }}>\n *                    <i>Press SPACE to check/uncheck the active item</i>\n *                    <div className=\"example-config\">\n *                        Checked Indices: {this.state.check.join(\",\")}\n *                    </div>\n *                </div>\n *            </div>\n *        );\n *    }\n *    onCheckChange = (event) => {\n *        this.setState({ check: handleTreeViewCheckChange(event, this.state.check, this.state.items) });\n *    }\n * }\n *\n * const tree = [ {\n *    text: 'Furniture', expanded: true, items: [\n *        { text: 'Tables & Chairs' }, { text: 'Sofas' }, { text: 'Occasional Furniture' } ]\n * }, {\n *    text: 'Decor', expanded: true, items: [\n *        { text: 'Bed Linen' }, { text: 'Curtains & Blinds' }, { text: 'Carpets' } ]\n * } ];\n *\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nexport function handleTreeViewCheckChange(event, check, data, settings) {\n  if (settings === void 0) {\n    settings = {};\n  }\n\n  if (!data || !data.length) {\n    return [];\n  }\n\n  var _a = parseOperation(check),\n      ids = _a.ids,\n      idField = _a.idField;\n\n  var itemId = idField ? getNestedValue(idField, event.item) : event.itemHierarchicalIndex;\n  var idIndex = ids.indexOf(itemId);\n  var itemJustChecked = idIndex === -1;\n  var newIds;\n\n  if (settings.singleMode) {\n    newIds = itemJustChecked ? [itemId] : [];\n  } else {\n    newIds = ids.slice();\n    itemJustChecked ? newIds.push(itemId) : newIds.splice(idIndex, 1);\n\n    if (settings.checkChildren) {\n      checkChildren(event.item, event.itemHierarchicalIndex, itemJustChecked, idField, newIds);\n    }\n\n    if (settings.checkParents) {\n      checkParents(event.itemHierarchicalIndex, itemJustChecked, idField, newIds, data);\n    }\n  }\n\n  return isArray(check) ? newIds : Object.assign({}, check, {\n    ids: newIds\n  });\n}\n\nfunction parseOperation(operation) {\n  var ids;\n  var idField = undefined;\n\n  if (isArray(operation)) {\n    ids = operation;\n  } else {\n    ids = operation.ids || [];\n    idField = operation.idField;\n  }\n\n  return {\n    ids: ids,\n    idField: idField\n  };\n}\n\nfunction checkChildren(item, itemHierarchicalIndex, itemJustChecked, idField, ids) {\n  getAllDirectIndirectChildrenIds(item, itemHierarchicalIndex, idField).forEach(function (itemId) {\n    if (itemJustChecked && ids.indexOf(itemId) === -1) {\n      ids.push(itemId);\n    } else if (!itemJustChecked && ids.indexOf(itemId) > -1) {\n      ids.splice(ids.indexOf(itemId), 1);\n    }\n  });\n}\n\nfunction checkParents(itemHierarchicalIndex, itemJustChecked, idField, ids, data) {\n  var it = makeParentsIterator();\n  var result = it.next();\n  itemJustChecked ? check() : uncheck();\n\n  function check() {\n    // Check all parents which have all their children checked.\n    while (!result.done) {\n      var _a = result.value,\n          id = _a.id,\n          item = _a.item; // The first check is needed. However, it is not sure whether to stop the entire loop.\n\n      if (ids.indexOf(id) === -1 && areAllDirectChildrenChecked(item, id, idField, ids)) {\n        ids.push(id);\n        result = it.next();\n      } else {\n        break;\n      }\n    }\n  }\n\n  function uncheck() {\n    // Uncheck parents until an already unchecked parent is reached.\n    while (!result.done) {\n      var id = result.value.id;\n      var idIndex = ids.indexOf(id);\n\n      if (idIndex > -1) {\n        ids.splice(idIndex, 1);\n        result = it.next();\n      } else {\n        break;\n      }\n    }\n  } // When called for unchecking, the parent items are not needed.\n  // That is why, for optimization, they are not returned.\n\n\n  function makeParentsIterator() {\n    var parents, i, parentId;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!idField) return [3\n          /*break*/\n          , 5];\n          parents = getAllParents(itemHierarchicalIndex, data);\n          i = parents.length - 1;\n          _a.label = 1;\n\n        case 1:\n          if (!(i > -1)) return [3\n          /*break*/\n          , 4];\n          return [4\n          /*yield*/\n          , {\n            id: getNestedValue(idField, parents[i]),\n            item: itemJustChecked ? parents[i] : undefined\n          }];\n\n        case 2:\n          _a.sent();\n\n          _a.label = 3;\n\n        case 3:\n          i--;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [3\n          /*break*/\n          , 8];\n\n        case 5:\n          parentId = getDirectParentId(itemHierarchicalIndex);\n          _a.label = 6;\n\n        case 6:\n          if (!parentId) return [3\n          /*break*/\n          , 8];\n          return [4\n          /*yield*/\n          , {\n            id: parentId,\n            item: itemJustChecked ? getItemById(parentId, data) : undefined\n          }];\n\n        case 7:\n          _a.sent();\n\n          parentId = getDirectParentId(parentId);\n          return [3\n          /*break*/\n          , 6];\n\n        case 8:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}