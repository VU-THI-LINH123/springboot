{"ast":null,"code":"/**\n * @hidden\n */\nvar ColumnResize =\n/** @class */\nfunction () {\n  function ColumnResize(triggerResize) {\n    var _this = this;\n    /**\n     * The settings for resizing the Grid.\n     */\n\n\n    this.resizable = false;\n    this.isRtl = false;\n\n    this.setIsRtl = function (isRtl) {\n      _this.isRtl = isRtl;\n    };\n\n    this.onResize = triggerResize;\n    this.dragHandler = this.dragHandler.bind(this);\n  }\n\n  ColumnResize.prototype.dragHandler = function (event, column, dragCue, end) {\n    var e = event.originalEvent;\n\n    if (!end) {\n      e.preventDefault();\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n    }\n\n    var tdElement = dragCue.parentElement;\n\n    if (!tdElement || !tdElement.parentElement) {\n      return;\n    }\n\n    var oldWidth = tdElement.clientWidth;\n    var newWidth;\n\n    if (this.isRtl) {\n      newWidth = dragCue.getBoundingClientRect().right - dragCue.offsetWidth / 2 - event.clientX;\n      newWidth += oldWidth;\n    } else {\n      newWidth = oldWidth + event.clientX - dragCue.getBoundingClientRect().left - dragCue.offsetWidth / 2;\n    }\n\n    if (!end && Math.abs(newWidth - oldWidth) < 1) {\n      return;\n    }\n\n    this.setWidths(column, Math.floor(newWidth) / oldWidth);\n    var index = this.columns.filter(function (c) {\n      return !c.children.length;\n    }).indexOf(column);\n    this.onResize(index, oldWidth, newWidth, e, end);\n  };\n\n  ColumnResize.prototype.setWidths = function (column, coef) {\n    var indexInOriginal = this.columns.indexOf(column);\n    var toAdjust = [];\n    var more = column.children.length;\n\n    for (var i = indexInOriginal + 1; more > 0 && i < this.columns.length; i++, more--) {\n      var cc = this.columns[i];\n\n      if (!cc.children.length) {\n        toAdjust.push(cc);\n      } else {\n        more += cc.children.length;\n      }\n    }\n\n    if (toAdjust.length === 0) {\n      toAdjust.push(column);\n    }\n\n    toAdjust.forEach(function (colToAdjust) {\n      var targetWidth = colToAdjust.width ? parseFloat(colToAdjust.width.toString()) * coef : 0;\n      var min = colToAdjust.minResizableWidth === undefined ? 10 : colToAdjust.minResizableWidth;\n\n      if (targetWidth < min) {\n        targetWidth = min;\n      }\n\n      colToAdjust.width = Math.floor(targetWidth);\n    });\n    this.updateColElements(toAdjust);\n  };\n\n  ColumnResize.prototype.updateColElements = function (affectedColumns) {\n    var columns = this.columns.filter(function (c) {\n      return !c.children.length;\n    });\n    var difference = 1e-10;\n\n    for (var i = 0; i < affectedColumns.length; i++) {\n      var colIndex = columns.indexOf(affectedColumns[i]);\n      var currentColumnFloatWidth = parseFloat((affectedColumns[i].width || 0).toString());\n      difference += currentColumnFloatWidth - Math.floor(currentColumnFloatWidth);\n      var currentWidth = Math.floor(currentColumnFloatWidth) + Math.floor(difference);\n      difference -= Math.floor(difference);\n      this.setColWidth(this.colGroupMain && this.colGroupMain.children[colIndex], currentWidth);\n      this.setColWidth(this.colGroupHeader && this.colGroupHeader.children[colIndex], currentWidth);\n      this.setColWidth(this.colGroupFooter && this.colGroupFooter.children[colIndex], currentWidth);\n    }\n  };\n\n  ColumnResize.prototype.setColWidth = function (col, width) {\n    if (col) {\n      col.style.width = width + 'px';\n    }\n  };\n\n  return ColumnResize;\n}();\n\nexport { ColumnResize };","map":null,"metadata":{},"sourceType":"module"}