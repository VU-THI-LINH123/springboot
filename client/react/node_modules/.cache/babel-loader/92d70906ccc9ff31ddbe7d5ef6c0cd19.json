{"ast":null,"code":"import { filterEqOperator, filterNotEqOperator, filterIsNullOperator, filterIsNotNullOperator, filterIsEmptyOperator, filterIsNotEmptyOperator, filterStartsWithOperator, filterContainsOperator, filterNotContainsOperator, filterEndsWithOperator, filterGteOperator, filterGtOperator, filterLteOperator, filterLtOperator, filterAfterOrEqualOperator, filterAfterOperator, filterBeforeOperator, filterBeforeOrEqualOperator } from './../messages';\nvar textOperators = [{\n  text: filterContainsOperator,\n  operator: 'contains'\n}, {\n  text: filterNotContainsOperator,\n  operator: 'doesnotcontain'\n}, {\n  text: filterEqOperator,\n  operator: 'eq'\n}, {\n  text: filterNotEqOperator,\n  operator: 'neq'\n}, {\n  text: filterStartsWithOperator,\n  operator: 'startswith'\n}, {\n  text: filterEndsWithOperator,\n  operator: 'endswith'\n}, {\n  text: filterIsNullOperator,\n  operator: 'isnull'\n}, {\n  text: filterIsNotNullOperator,\n  operator: 'isnotnull'\n}, {\n  text: filterIsEmptyOperator,\n  operator: 'isempty'\n}, {\n  text: filterIsNotEmptyOperator,\n  operator: 'isnotempty'\n}];\nvar numericOperators = [{\n  text: filterEqOperator,\n  operator: 'eq'\n}, {\n  text: filterNotEqOperator,\n  operator: 'neq'\n}, {\n  text: filterGteOperator,\n  operator: 'gte'\n}, {\n  text: filterGtOperator,\n  operator: 'gt'\n}, {\n  text: filterLteOperator,\n  operator: 'lte'\n}, {\n  text: filterLtOperator,\n  operator: 'lt'\n}, {\n  text: filterIsNullOperator,\n  operator: 'isnull'\n}, {\n  text: filterIsNotNullOperator,\n  operator: 'isnotnull'\n}];\nvar dateOperators = [{\n  text: filterEqOperator,\n  operator: 'eq'\n}, {\n  text: filterNotEqOperator,\n  operator: 'neq'\n}, {\n  text: filterAfterOrEqualOperator,\n  operator: 'gte'\n}, {\n  text: filterAfterOperator,\n  operator: 'gt'\n}, {\n  text: filterBeforeOperator,\n  operator: 'lt'\n}, {\n  text: filterBeforeOrEqualOperator,\n  operator: 'lte'\n}, {\n  text: filterIsNullOperator,\n  operator: 'isnull'\n}, {\n  text: filterIsNotNullOperator,\n  operator: 'isnotnull'\n}];\nvar booleanOperators = [{\n  text: filterEqOperator,\n  operator: 'eq'\n}, {\n  text: filterNotEqOperator,\n  operator: 'neq'\n}];\n/**\n * Represents the operators for the TextFilter, NumericFilter, DateFilter and BooleanFilter components.\n *\n * The text field of each operator object will be resolved according to the\n * [localization messages]({% slug globalization_datatools %}#toc-messages).\n */\n\nvar Operators =\n/** @class */\nfunction () {\n  function Operators() {}\n\n  Object.defineProperty(Operators, \"text\", {\n    /**\n     * An array containing the operators for the TextFilter component.\n     *\n     * The operators are:\n     *\n     * - { text: 'filter.containsOperator', operator: 'contains' }\n     * - { text: 'filter.notContainsOperator', operator: 'doesnotcontain' }\n     * - { text: 'filter.eqOperator', operator: 'eq' }\n     * - { text: 'filter.notEqOperator', operator: 'neq' }\n     * - { text: 'filter.startsWithOperator', operator: 'startswith' }\n     * - { text: 'filter.endsWithOperator', operator: 'endswith' }\n     * - { text: 'filter.isNullOperator', operator: 'isnull' }\n     * - { text: 'filter.isNotNullOperator', operator: 'isnotnull' }\n     * - { text: 'filter.isEmptyOperator', operator: 'isempty' }\n     * - { text: 'filter.isNotEmptyOperator', operator: 'isnotempty' }\n     */\n    get: function get() {\n      return textOperators.slice();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Operators, \"numeric\", {\n    /**\n     * An array containing the operators for the NumericFilter component.\n     *\n     * The operators are:\n     *\n     * - { text: 'filter.eqOperator', operator: 'eq' }\n     * - { text: 'filter.notEqOperator', operator: 'neq' }\n     * - { text: 'filter.gteOperator', operator: 'gte' }\n     * - { text: 'filter.gtOperator', operator: 'gt' }\n     * - { text: 'filter.lteOperator', operator: 'lte' }\n     * - { text: 'filter.ltOperator', operator: 'lt' }\n     * - { text: 'filter.isNullOperator', operator: 'isnull' }\n     * - { text: 'filter.isNotNullOperator', operator: 'isnotnull' }\n     */\n    get: function get() {\n      return numericOperators.slice();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Operators, \"date\", {\n    /**\n     * An array containing the operators for the DateFilter component.\n     *\n     * The operators are:\n     *\n     * - { text: 'filter.eqOperator', operator: 'eq' }\n     * - { text: 'filter.notEqOperator', operator: 'neq' }\n     * - { text: 'filter.afterOrEqualOperator', operator: 'gte' }\n     * - { text: 'filter.afterOperator', operator: 'gt' }\n     * - { text: 'filter.beforeOperator', operator: 'lt' }\n     * - { text: 'filter.beforeOrEqualOperator', operator: 'lte' }\n     * - { text: 'filter.isNullOperator', operator: 'isnull' }\n     * - { text: 'filter.isNotNullOperator', operator: 'isnotnull' }\n     */\n    get: function get() {\n      return dateOperators.slice();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Operators, \"boolean\", {\n    /**\n     * An array containing the operators for the BooleanFilter component.\n     *\n     * The operators are:\n     *\n     * - { text: 'filter.eqOperator', operator: 'eq' }\n     * - { text: 'filter.notEqOperator', operator: 'neq' }\n     */\n    get: function get() {\n      return booleanOperators.slice();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Operators;\n}();\n\nexport { Operators };\n/**\n * @hidden\n */\n\nexport var stringOperator = function stringOperator(operator) {\n  return operator === 'contains' || operator === 'doesnotcontain' || operator === 'startswith' || operator === 'endswith';\n};\n/**\n * @hidden\n */\n\nexport var unaryOperator = function unaryOperator(operator) {\n  return operator === 'isnull' || operator === 'isnotnull' || operator === 'isempty' || operator === 'isnotempty';\n};","map":null,"metadata":{},"sourceType":"module"}