{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { MultiColumnList } from './../common/MultiColumnList';\nimport { BrowserSupportService, classNames, getter } from '@progress/kendo-react-common';\nimport ComboBox from '../ComboBox/ComboBox';\n\nvar columnWidth = function columnWidth(width, defaultWidth) {\n  if (width) {\n    return typeof width === 'number' ? width + 'px' : width;\n  }\n\n  return defaultWidth;\n};\n/**\n * Represents the MultiColumnComboBox component.\n */\n\n\nexport var MultiColumnComboBox = React.forwardRef(function (props, ref) {\n  var target = React.useRef(null);\n  var comboBoxRef = React.useRef(null);\n\n  var _a = React.useState(0),\n      scrollbarWidth = _a[0],\n      setScrollbarWidth = _a[1];\n\n  var _b = props.columns,\n      columns = _b === void 0 ? defaultProps.columns : _b,\n      _c = props.popupSettings,\n      popupSettings = _c === void 0 ? defaultProps.popupSettings : _c,\n      other = __rest(props, [\"columns\", \"popupSettings\"]);\n\n  var focus = React.useCallback(function () {\n    if (comboBoxRef.current) {\n      comboBoxRef.current.focus();\n    }\n  }, [comboBoxRef]);\n  React.useImperativeHandle(target, function () {\n    return {\n      element: comboBoxRef && comboBoxRef.current && comboBoxRef.current.element,\n      focus: focus,\n      props: props\n    };\n  });\n  React.useImperativeHandle(ref, function () {\n    return target.current;\n  });\n  var popupWidth = React.useMemo(function () {\n    return 'calc(' + columns.map(function (column) {\n      return columnWidth(column.width, defaultProps.width);\n    }).filter(Boolean).join(' + ') + ')';\n  }, [columns]);\n  var header = React.useMemo(function () {\n    return React.createElement(\"div\", {\n      className: \"k-grid-header\",\n      style: {\n        paddingRight: scrollbarWidth\n      }\n    }, React.createElement(\"div\", {\n      className: \"k-grid-header-wrap\"\n    }, React.createElement(\"table\", {\n      role: \"presentation\"\n    }, React.createElement(\"colgroup\", null, columns.map(function (column, i) {\n      return React.createElement(\"col\", {\n        key: column.uniqueKey ? column.uniqueKey : i,\n        style: {\n          width: column.width ? column.width : defaultProps.width\n        }\n      });\n    })), React.createElement(\"tbody\", null, React.createElement(\"tr\", null, columns.map(function (column, i) {\n      return React.createElement(\"th\", {\n        key: column.uniqueKey ? column.uniqueKey : i,\n        className: \"k-header\"\n      }, column.header || \"\\u00A0\");\n    }))))));\n  }, [columns, scrollbarWidth]);\n  var skip = props.virtual ? props.virtual.skip : 0;\n  var itemRender = React.useCallback(function (li, liProps) {\n    var children = columns.map(function (column, i) {\n      return React.createElement(\"span\", {\n        className: \"k-cell\",\n        style: {\n          width: column.width ? column.width : defaultProps.width\n        },\n        key: column.uniqueKey ? column.uniqueKey : i\n      }, column.field ? getter(column.field)(liProps.dataItem) : '');\n    });\n    var group = undefined;\n    var curGroup,\n        prevGroup,\n        groupGetter,\n        data = props.data || [];\n    var index = liProps.index - skip;\n\n    if (props.groupField !== undefined) {\n      groupGetter = getter(props.groupField);\n      curGroup = groupGetter(data[index]);\n      prevGroup = groupGetter(data[index - 1]);\n\n      if (curGroup && prevGroup && curGroup !== prevGroup) {\n        group = curGroup;\n      }\n    }\n\n    if (group) {\n      children.push(React.createElement(\"div\", {\n        key: \"group\",\n        className: \"k-cell k-group-cell\"\n      }, React.createElement(\"span\", null, group)));\n    }\n\n    return React.cloneElement(li, __assign({}, li.props), children);\n  }, [columns, props.groupField, props.data, skip]);\n  var handleChange = React.useCallback(function (event) {\n    if (props.onChange) {\n      props.onChange.call(undefined, __assign({}, event, {\n        target: target.current\n      }));\n    }\n  }, [props.onChange, target]);\n  React.useEffect(function () {\n    setScrollbarWidth(new BrowserSupportService().scrollbarWidth);\n  }, []);\n  return React.createElement(ComboBox, __assign({\n    list: MultiColumnList,\n    header: header,\n    itemRender: itemRender,\n    onChange: handleChange,\n    popupSettings: __assign({\n      width: popupWidth\n    }, popupSettings, {\n      className: classNames('k-dropdowngrid-popup k-popup-flush', popupSettings.className)\n    })\n  }, other));\n});\n\nvar propTypes = __assign({}, ComboBox.propTypes, {\n  columns: PropTypes.any.isRequired\n});\n\nvar defaultProps = {\n  columns: [],\n  popupSettings: {},\n  width: '200px'\n};\nMultiColumnComboBox.displayName = 'KendoMultiColumnComboBox'; // TODO: delete casting when @types/react is updated!\n\nMultiColumnComboBox.propTypes = propTypes;\nMultiColumnComboBox.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}