{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Button, Toolbar, ToolbarItem } from '@progress/kendo-react-buttons';\nimport { DropDownList } from '@progress/kendo-react-dropdowns';\nimport { provideLocalizationService, registerForLocalization } from '@progress/kendo-react-intl';\nimport { unaryOperator, stringOperator } from './operators';\nimport { messages, filterClose } from '../messages';\n/**\n * @hidden\n */\n\nvar Expression =\n/** @class */\nfunction (_super) {\n  __extends(Expression, _super);\n\n  function Expression() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.onFieldChange = function (event) {\n      var nextFieldName = event.value.name;\n\n      var nextField = _this.props.fields.find(function (f) {\n        return f.name === nextFieldName;\n      });\n\n      var prevFilter = _this.props.filter;\n      var operator = nextField && !nextField.operators.some(function (o) {\n        return o.operator === prevFilter.operator;\n      }) ? nextField.operators[0].operator : prevFilter.operator;\n      var nextFilter = {\n        field: nextFieldName,\n        operator: operator\n      };\n\n      if (!unaryOperator(operator)) {\n        nextFilter.value = stringOperator(operator) ? '' : null;\n      }\n\n      _this.triggerOnFilterChange(prevFilter, nextFilter, event);\n    };\n\n    _this.onOperatorChange = function (event) {\n      var operator = event.value.operator;\n      var prevFilter = _this.props.filter;\n      var nextFilter;\n\n      if (unaryOperator(operator)) {\n        var value = prevFilter.value,\n            prevFilterNoValue = __rest(prevFilter, [\"value\"]);\n\n        nextFilter = __assign({}, prevFilterNoValue, {\n          operator: operator\n        });\n      } else {\n        nextFilter = __assign({}, prevFilter, {\n          operator: operator\n        });\n      }\n\n      _this.triggerOnFilterChange(prevFilter, nextFilter, event);\n    };\n\n    _this.onInputChange = function (event) {\n      var prevFilter = _this.props.filter;\n      var nextFilter = event.nextFilter;\n\n      if (unaryOperator(nextFilter.operator)) {\n        var field = _this.props.fields.find(function (f) {\n          return f.name === nextFilter.field;\n        });\n\n        nextFilter = __assign({}, nextFilter, {\n          operator: field && field.operators[0].operator || nextFilter.operator\n        });\n      }\n\n      _this.triggerOnFilterChange(prevFilter, nextFilter, event);\n    };\n\n    _this.triggerOnFilterChange = function (prevFilter, nextFilter, event) {\n      var changeEvent = {\n        prevFilter: prevFilter,\n        nextFilter: nextFilter,\n        syntheticEvent: event.syntheticEvent,\n        nativeEvent: event.nativeEvent,\n        target: _this\n      };\n\n      _this.props.onChange.call(undefined, changeEvent);\n    };\n\n    _this.onFilterRemove = function (event) {\n      var removeEvent = {\n        filter: _this.props.filter,\n        syntheticEvent: event.syntheticEvent,\n        nativeEvent: event.nativeEvent,\n        target: _this\n      };\n\n      _this.props.onRemove.call(undefined, removeEvent);\n    };\n\n    return _this;\n  }\n\n  Expression.prototype.render = function () {\n    var _a = this.props,\n        fields = _a.fields,\n        filter = _a.filter;\n    var field = fields.find(function (f) {\n      return f.name === filter.field;\n    });\n    var locService = provideLocalizationService(this);\n    var operators = (field && field.operators || []).map(function (o) {\n      return __assign({}, o, {\n        text: locService.toLanguageString(o.text, messages[o.text] || o.text)\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"k-filter-toolbar\"\n    }, React.createElement(Toolbar, {\n      keyboardNavigation: false\n    }, React.createElement(ToolbarItem, {\n      className: \"k-filter-field\"\n    }, React.createElement(DropDownList, {\n      className: \"k-filter-dropdown\",\n      data: fields,\n      textField: \"label\",\n      value: fields.find(function (f) {\n        return f.name === filter.field;\n      }),\n      onChange: this.onFieldChange\n    })), React.createElement(ToolbarItem, {\n      className: \"k-filter-operator\"\n    }, React.createElement(DropDownList, {\n      data: operators,\n      textField: \"text\",\n      value: operators.find(function (o) {\n        return o.operator === filter.operator;\n      }),\n      onChange: this.onOperatorChange\n    })), React.createElement(ToolbarItem, {\n      className: \"k-filter-value\"\n    }, field && React.createElement(field.filter, {\n      filter: filter,\n      onFilterChange: this.onInputChange\n    })), React.createElement(ToolbarItem, null, React.createElement(Button, {\n      title: locService.toLanguageString(filterClose, messages[filterClose]),\n      icon: \"close\",\n      look: \"flat\",\n      onClick: this.onFilterRemove\n    }))));\n  };\n\n  Expression.propTypes = {\n    filter: PropTypes.object.isRequired,\n    fields: PropTypes.array.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onRemove: PropTypes.func.isRequired\n  };\n  return Expression;\n}(React.Component);\n\nexport { Expression };\nregisterForLocalization(Expression);","map":null,"metadata":{},"sourceType":"module"}