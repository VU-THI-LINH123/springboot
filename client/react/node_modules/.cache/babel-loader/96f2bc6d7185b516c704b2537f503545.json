{"ast":null,"code":"/**\n * @hidden\n */\nexport function tableColumnsVirtualization(args) {\n  var enabled = args.enabled,\n      _a = args.columns,\n      columns = _a === void 0 ? [] : _a,\n      tableViewPortWidth = args.tableViewPortWidth,\n      scrollLeft = args.scrollLeft;\n  var colSpans = columns.map(function () {\n    return 1;\n  });\n  var hiddenColumns = columns.map(function () {\n    return false;\n  });\n\n  if (!enabled) {\n    return {\n      colSpans: colSpans,\n      hiddenColumns: hiddenColumns\n    };\n  }\n\n  var widths = columns.map(function (c) {\n    return parseFloat((c.width || '').toString()) || 10;\n  });\n  var widthOfHiddenColumns = 0;\n\n  for (var i = 0; i < columns.length; i++) {\n    if (columns[i].locked) {\n      continue;\n    }\n\n    var considerNext = i < widths.length - 1 ? widths[i + 1] : 0;\n\n    if (widthOfHiddenColumns + widths[i] + considerNext < scrollLeft) {\n      hiddenColumns[i] = true;\n      widthOfHiddenColumns += widths[i];\n    } else {\n      break;\n    }\n  }\n\n  var totalWidth = widths.reduce(function (acc, current) {\n    return acc + current;\n  }, 0);\n  widthOfHiddenColumns = 0;\n\n  for (var i = columns.length - 1; i >= 0; i--) {\n    if (columns[i].locked) {\n      continue;\n    }\n\n    if (widthOfHiddenColumns + 2 * widths[i] < totalWidth - tableViewPortWidth - scrollLeft) {\n      hiddenColumns[i] = true;\n      widthOfHiddenColumns += widths[i];\n    } else {\n      break;\n    }\n  }\n\n  var hiddenCols = hiddenColumns.slice();\n\n  var hidden = function hidden(value) {\n    return value;\n  };\n\n  var lastVisible = hiddenCols.lastIndexOf(false);\n  var anyHidden = hiddenCols.some(hidden);\n  var allHidden = hiddenCols.every(hidden);\n  var hiddenSeqLength;\n  var updateIndex;\n\n  while (anyHidden && hiddenCols.length && (lastVisible !== -1 || allHidden)) {\n    if (lastVisible < hiddenCols.length - 1) {\n      hiddenSeqLength = allHidden ? hiddenCols.length : hiddenCols.length - lastVisible - 1;\n      updateIndex = hiddenCols.length - hiddenSeqLength;\n\n      if (updateIndex === 0) {\n        updateIndex = hiddenSeqLength - 1;\n      }\n\n      hiddenColumns[updateIndex] = false;\n      colSpans[updateIndex] = hiddenSeqLength;\n      hiddenCols.splice(lastVisible + 1, hiddenSeqLength);\n    }\n\n    while (hiddenCols.length && !hiddenCols[hiddenCols.length - 1]) {\n      hiddenCols.pop();\n    }\n\n    lastVisible = hiddenCols.lastIndexOf(false);\n    anyHidden = hiddenCols.some(hidden);\n    allHidden = hiddenCols.every(hidden);\n  }\n\n  return {\n    colSpans: colSpans,\n    hiddenColumns: hiddenColumns\n  };\n}","map":null,"metadata":{},"sourceType":"module"}