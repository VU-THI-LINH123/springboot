{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { Popup } from '@progress/kendo-react-popup';\nimport { useLocalization } from '@progress/kendo-react-intl';\nimport { isCompositeFilterDescriptor } from '@progress/kendo-data-query';\nimport { ColumnMenuItem } from './ColumnMenuItem';\nimport { ColumnMenuTextFilter, ColumnMenuNumericFilter, ColumnMenuDateFilter, ColumnMenuBooleanFilter } from './ColumnMenuFilters';\nimport { ColumnMenuFilterLogic } from './ColumnMenuFilterLogic';\nimport { ColumnMenuFilterForm } from './ColumnMenuFilterForm';\nimport { messages, columnMenuFilterTitle, columnMenuSortAscending, columnMenuSortDescending } from '../messages';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\n\nvar ColumnMenu = function ColumnMenu(props) {\n  validatePackage(packageMetadata);\n  var emptySort = React.useRef([]);\n  var field = props.field,\n      filter = props.filter,\n      _a = props.sort,\n      sort = _a === void 0 ? emptySort.current : _a,\n      onSortChange = props.onSortChange,\n      onFilterChange = props.onFilterChange,\n      initialFilter = props.initialFilter,\n      sortAsc = props.sortAsc,\n      sortDesc = props.sortDesc,\n      _b = props.filterContent,\n      filterContent = _b === void 0 ? [] : _b;\n\n  var _c = React.useState(false),\n      show = _c[0],\n      setShow = _c[1];\n\n  var _d = React.useState(false),\n      filterExpand = _d[0],\n      setFilterExpand = _d[1];\n\n  var _e = React.useState(initialFilter(field)),\n      currentFilter = _e[0],\n      setCurrentFilter = _e[1];\n\n  var anchor = React.useRef(null);\n  var popup = React.useRef(null);\n  var blurTimeout = React.useRef(null);\n  var menuFilter = React.useCallback(function () {\n    return (filter || []).find(function (f) {\n      return f.filters.every(function (inF) {\n        return !isCompositeFilterDescriptor(inF) && inF.field === field;\n      });\n    });\n  }, [filter, field]);\n  var closeMenu = React.useCallback(function () {\n    setShow(false);\n    setFilterExpand(false);\n  }, []);\n  var onBlur = React.useCallback(function () {\n    clearTimeout(blurTimeout.current);\n    blurTimeout.current = setTimeout(function () {\n      closeMenu();\n    });\n  }, []);\n  var onFocus = React.useCallback(function () {\n    return clearTimeout(blurTimeout.current);\n  }, []);\n  var onColumnMenuButtonClick = React.useCallback(function () {\n    setShow(!show);\n    setFilterExpand(false);\n    setCurrentFilter(show ? currentFilter : menuFilter() || initialFilter(field));\n  }, [filter, field, show, currentFilter, initialFilter]);\n  React.useEffect(function () {\n    if (show && popup.current) {\n      popup.current.focus();\n    }\n  }, [show]);\n  var filterItemClick = React.useCallback(function () {\n    return setFilterExpand(!filterExpand);\n  }, [filterExpand]);\n  var changeSort = React.useCallback(function (event, dir) {\n    var newSort = sort.slice();\n    var currentSortIndex = newSort.findIndex(function (d) {\n      return d.field === field;\n    });\n    var newSortDescriptor = {\n      field: field,\n      dir: dir\n    };\n\n    if (currentSortIndex >= 0) {\n      if (newSort[currentSortIndex].dir !== newSortDescriptor.dir) {\n        newSort.splice(currentSortIndex, 1, newSortDescriptor);\n      } else {\n        newSort.splice(currentSortIndex, 1);\n      }\n    } else {\n      newSort.push(newSortDescriptor);\n    }\n\n    closeMenu();\n\n    if (onSortChange) {\n      onSortChange.call(undefined, event, newSort, field);\n    }\n  }, [sort, field, onSortChange]);\n  var filterChange = React.useCallback(function (_event, nextFilter, prevFilter) {\n    var stateFilter = __assign({}, currentFilter, {\n      filters: currentFilter.filters.slice()\n    });\n\n    var index = stateFilter.filters.indexOf(prevFilter);\n    stateFilter.filters.splice(index, 1, nextFilter);\n    setCurrentFilter(stateFilter);\n  }, [currentFilter]);\n  var onSubmit = React.useCallback(function (event) {\n    event.preventDefault();\n    var newFilter = (filter || []).slice();\n    var prev = menuFilter();\n    var index = prev ? newFilter.indexOf(prev) : -1;\n\n    if (index >= 0) {\n      newFilter.splice(index, 1, currentFilter);\n    } else {\n      newFilter.push(currentFilter);\n    }\n\n    closeMenu();\n\n    if (onFilterChange) {\n      onFilterChange.call(undefined, event, newFilter, field);\n    }\n  }, [filter, currentFilter, field, onFilterChange]);\n  var onReset = React.useCallback(function (event) {\n    var newFilter = (filter || []).slice();\n    var prev = menuFilter();\n    var index = prev ? newFilter.indexOf(prev) : -1;\n\n    if (index >= 0) {\n      newFilter.splice(index, 1);\n    }\n\n    setCurrentFilter(initialFilter(field));\n    closeMenu();\n\n    if (onFilterChange) {\n      onFilterChange.call(undefined, event, newFilter, field);\n    }\n  }, [filter, field, onFilterChange, initialFilter]);\n  var sortAscChange = React.useCallback(function (e) {\n    return changeSort(e, 'asc');\n  }, [sort]);\n  var sortDescChange = React.useCallback(function (e) {\n    return changeSort(e, 'desc');\n  }, [sort]);\n  var onLogicChange = React.useCallback(function (event) {\n    return setCurrentFilter(__assign({}, currentFilter, {\n      logic: event.value.logic\n    }));\n  }, [currentFilter]);\n  var currentSort = sort.find(function (d) {\n    return d.field === field;\n  }) || {\n    dir: ''\n  };\n  var firstFilter = currentFilter.filters[0];\n  var secondFilter = currentFilter.filters[1];\n  var FirstFilterComponent = filterContent[0],\n      FilterLogicComponent = filterContent[1],\n      SecondFilterComponent = filterContent[2];\n  var localization = useLocalization();\n  return React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    ref: anchor,\n    onClick: onColumnMenuButtonClick,\n    className: 'k-grid-column-menu k-grid-filter' + (Boolean(menuFilter()) ? ' k-state-active' : '')\n  }, React.createElement(\"span\", {\n    className: \"k-icon k-i-more-vertical\"\n  })), React.createElement(Popup, {\n    anchor: anchor.current,\n    show: show\n  }, React.createElement(\"div\", {\n    className: \"k-grid-columnmenu-popup\",\n    ref: popup,\n    tabIndex: 0,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    style: {\n      outline: 'none'\n    }\n  }, (sortAsc || sortDesc) && React.createElement(\"div\", {\n    className: \"k-columnmenu-item-wrapper\"\n  }, sortAsc && React.createElement(ColumnMenuItem, {\n    title: localization.toLanguageString(columnMenuSortAscending, messages[columnMenuSortAscending]),\n    iconClass: \"k-i-sort-asc-sm\",\n    selected: currentSort.dir === 'asc',\n    onClick: sortAscChange\n  }), sortDesc && React.createElement(ColumnMenuItem, {\n    title: localization.toLanguageString(columnMenuSortDescending, messages[columnMenuSortDescending]),\n    iconClass: \"k-i-sort-desc-sm\",\n    selected: currentSort.dir === 'desc',\n    onClick: sortDescChange\n  })), filterContent.length > 0 && React.createElement(\"div\", {\n    className: \"k-columnmenu-item-wrapper\"\n  }, React.createElement(ColumnMenuItem, {\n    iconClass: \"k-i-filter\",\n    title: localization.toLanguageString(columnMenuFilterTitle, messages[columnMenuFilterTitle]),\n    onClick: filterItemClick\n  }), React.createElement(ColumnMenuFilterForm, {\n    show: filterExpand,\n    onSubmit: onSubmit,\n    onReset: onReset\n  }, FirstFilterComponent && React.createElement(FirstFilterComponent, {\n    filter: firstFilter,\n    onFilterChange: filterChange\n  }), FilterLogicComponent && React.createElement(FilterLogicComponent, {\n    value: currentFilter.logic,\n    onChange: onLogicChange\n  }), SecondFilterComponent && React.createElement(SecondFilterComponent, {\n    filter: secondFilter,\n    onFilterChange: filterChange\n  }))))));\n};\n/**\n * The `ColumnMenuTextColumn` component. Use it for `string` type columns.\n */\n\n\nexport var ColumnMenuTextColumn = function ColumnMenuTextColumn(props) {\n  var initialFilter = React.useCallback(function (field) {\n    return {\n      logic: 'and',\n      filters: [{\n        operator: 'contains',\n        field: field,\n        value: ''\n      }, {\n        operator: 'contains',\n        field: field,\n        value: ''\n      }]\n    };\n  }, []);\n  return React.createElement(ColumnMenu, __assign({\n    sortAsc: true,\n    sortDesc: true,\n    filterContent: [ColumnMenuTextFilter, ColumnMenuFilterLogic, ColumnMenuTextFilter],\n    initialFilter: initialFilter\n  }, props));\n};\n/**\n * The `ColumnMenuNumericColumn` component. Use it for `number` type columns.\n */\n\nexport var ColumnMenuNumericColumn = function ColumnMenuNumericColumn(props) {\n  var initialFilter = React.useCallback(function (field) {\n    return {\n      logic: 'or',\n      filters: [{\n        operator: 'eq',\n        field: field,\n        value: null\n      }, {\n        operator: 'eq',\n        field: field,\n        value: null\n      }]\n    };\n  }, []);\n  return React.createElement(ColumnMenu, __assign({\n    sortAsc: true,\n    sortDesc: true,\n    filterContent: [ColumnMenuNumericFilter, ColumnMenuFilterLogic, ColumnMenuNumericFilter],\n    initialFilter: initialFilter\n  }, props));\n};\n/**\n * The `ColumnMenuDateColumn` component. Use it for `Date` type columns.\n */\n\nexport var ColumnMenuDateColumn = function ColumnMenuDateColumn(props) {\n  var initialFilter = React.useCallback(function (field) {\n    return {\n      logic: 'or',\n      filters: [{\n        operator: 'eq',\n        field: field,\n        value: null\n      }, {\n        operator: 'eq',\n        field: field,\n        value: null\n      }]\n    };\n  }, []);\n  return React.createElement(ColumnMenu, __assign({\n    sortAsc: true,\n    sortDesc: true,\n    filterContent: [ColumnMenuDateFilter, ColumnMenuFilterLogic, ColumnMenuDateFilter],\n    initialFilter: initialFilter\n  }, props));\n};\n/**\n * The `ColumnMenuBooleanColumn` component. Use it for `boolean` type columns.\n */\n\nexport var ColumnMenuBooleanColumn = function ColumnMenuBooleanColumn(props) {\n  var initialFilter = React.useCallback(function (field) {\n    return {\n      logic: 'and',\n      filters: [{\n        operator: 'eq',\n        field: field,\n        value: false\n      }]\n    };\n  }, []);\n  return React.createElement(ColumnMenu, __assign({\n    sortAsc: true,\n    sortDesc: true,\n    filterContent: [ColumnMenuBooleanFilter],\n    initialFilter: initialFilter\n  }, props));\n};","map":null,"metadata":{},"sourceType":"module"}