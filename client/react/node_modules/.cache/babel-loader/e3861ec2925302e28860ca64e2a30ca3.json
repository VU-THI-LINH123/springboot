{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport { classNames, guid, Draggable } from '@progress/kendo-react-common';\nimport { createId } from './utils/itemIdUtils';\nimport { isItemExpandedAndWithChildren, hasChildren } from './utils/itemUtils';\nimport { Reveal } from '@progress/kendo-react-animation';\nimport { DOM_KENDO_ITEM_ID_FIELD, DOM_KENDO_TREEVIEW_GUID_FIELD } from './utils/consts';\n/**\n * @hidden\n */\n\nvar TreeViewItem =\n/** @class */\nfunction (_super) {\n  __extends(TreeViewItem, _super);\n\n  function TreeViewItem() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.itemGuid = guid();\n\n    _this.onCheckChange = function (e) {\n      _this.props.onCheckChange(e, _this.item, _this.itemId);\n    };\n\n    _this.onExpandChange = function (e) {\n      _this.props.onExpandChange(e, _this.item, _this.itemId);\n    };\n\n    _this.onItemClick = function (e) {\n      _this.props.onItemClick(e, _this.item, _this.itemId);\n    };\n\n    _this.onPress = function (e) {\n      _this.props.onPress(e.event, _this.item, _this.itemId);\n    };\n\n    _this.onDrag = function (e) {\n      _this.props.onDrag(e.event, _this.item, _this.itemId);\n    };\n\n    _this.onRelease = function (e) {\n      _this.props.onRelease(e.event, _this.item, _this.itemId);\n    };\n\n    _this.assignDraggableMeta = function (element) {\n      if (element) {\n        element[DOM_KENDO_ITEM_ID_FIELD] = _this.props.itemId;\n        element[DOM_KENDO_TREEVIEW_GUID_FIELD] = _this.props.treeGuid;\n      }\n    };\n\n    return _this;\n  }\n\n  TreeViewItem.prototype.render = function () {\n    var _this = this;\n\n    var subitems = this.renderSubitemsIfApplicable();\n    var itemInPart = this.renderItemInPart();\n    return React.createElement(\"li\", {\n      className: this.getRootClassName(),\n      tabIndex: this.tabIndex,\n      role: \"treeitem\",\n      \"aria-expanded\": this.ariaExpanded,\n      \"aria-selected\": this.ariaSelected,\n      \"aria-checked\": this.ariaChecked,\n      \"aria-disabled\": this.fieldsSvc.disabled(this.item) ? true : undefined,\n      ref: function ref(el) {\n        return _this.itemElement = el;\n      }\n    }, React.createElement(\"div\", {\n      className: \"k-mid\",\n      ref: this.assignDraggableMeta\n    }, this.renderExpandIcon(), this.renderCheckbox(), this.props.draggable ? React.createElement(Draggable, {\n      onPress: this.onPress,\n      onDrag: this.onDrag,\n      onRelease: this.onRelease\n    }, itemInPart) : itemInPart), this.props.animate ? React.createElement(Reveal, {\n      transitionEnterDuration: 200,\n      transitionExitDuration: 200,\n      style: {\n        display: 'block'\n      },\n      children: subitems\n    }) : subitems);\n  };\n\n  TreeViewItem.prototype.componentDidMount = function () {\n    var focusedItemId = this.props.focusedItemId;\n    var currentItemId = this.itemId;\n\n    if (focusedItemId && focusedItemId === currentItemId) {\n      this.props.onFocusDomElNeeded(this.itemElement);\n    }\n\n    if (this.checkboxElement) {\n      this.checkboxElement.indeterminate = this.fieldsSvc.checkIndeterminate(this.item);\n    }\n  };\n\n  TreeViewItem.prototype.componentDidUpdate = function (prevProps) {\n    var focusedItemId = this.props.focusedItemId;\n\n    if (focusedItemId && focusedItemId !== prevProps.focusedItemId && focusedItemId === this.itemId) {\n      this.props.onFocusDomElNeeded(this.itemElement);\n    }\n\n    if (this.checkboxElement) {\n      var indeterminate = this.fieldsSvc.checkIndeterminate(this.item);\n\n      if (indeterminate !== prevProps.fieldsService.checkIndeterminate(prevProps.item)) {\n        this.checkboxElement.indeterminate = indeterminate;\n      }\n    }\n  };\n\n  TreeViewItem.prototype.renderCheckbox = function () {\n    var _this = this;\n\n    if (this.props.checkboxes) {\n      return React.createElement(\"div\", {\n        className: \"k-checkbox-wrapper\"\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        className: \"k-checkbox\",\n        checked: Boolean(this.fieldsSvc.checked(this.item)),\n        id: this.itemGuid,\n        tabIndex: -1,\n        onChange: this.onCheckChange,\n        ref: function ref(el) {\n          return _this.checkboxElement = el;\n        }\n      }), React.createElement(\"label\", {\n        className: \"k-checkbox-label\",\n        htmlFor: this.itemGuid\n      }));\n    } else {\n      return undefined;\n    }\n  };\n\n  TreeViewItem.prototype.renderExpandIcon = function () {\n    return this.props.expandIcons && ( // If it is explicitly said that the item has children (even not loaded yet)\n    // or if the item actually has children, then render the icon.\n    this.fieldsSvc.hasChildren(this.item) || hasChildren(this.item)) ? React.createElement(\"span\", {\n      className: this.getIconClassName(),\n      onClick: this.onExpandChange\n    }) : undefined;\n  };\n\n  TreeViewItem.prototype.renderSubitemsIfApplicable = function () {\n    var _this = this;\n\n    return isItemExpandedAndWithChildren(this.item, this.fieldsSvc) ? React.createElement(\"ul\", {\n      className: \"k-content\",\n      role: \"group\"\n    }, this.item.items.map(function (item, index) {\n      return React.createElement(TreeViewItem, {\n        item: item,\n        itemId: createId(index, _this.itemId),\n        treeGuid: _this.props.treeGuid,\n        animate: _this.props.animate,\n        focusedItemId: _this.props.focusedItemId,\n        tabbableItemId: _this.props.tabbableItemId,\n        fieldsService: _this.props.fieldsService,\n        itemUI: _this.props.itemUI,\n        checkboxes: _this.props.checkboxes,\n        ariaMultiSelectable: _this.props.ariaMultiSelectable,\n        onItemClick: _this.props.onItemClick,\n        onFocusDomElNeeded: _this.props.onFocusDomElNeeded,\n        draggable: _this.props.draggable,\n        onPress: _this.props.onPress,\n        onDrag: _this.props.onDrag,\n        onRelease: _this.props.onRelease,\n        expandIcons: _this.props.expandIcons,\n        onExpandChange: _this.props.onExpandChange,\n        onCheckChange: _this.props.onCheckChange,\n        key: index\n      });\n    })) : undefined;\n  };\n\n  TreeViewItem.prototype.renderItemInPart = function () {\n    return React.createElement(\"span\", {\n      className: this.getContentClassName(),\n      style: {\n        touchAction: 'none'\n      },\n      onClick: this.onItemClick\n    }, this.props.itemUI ? React.createElement(this.props.itemUI, {\n      item: this.item,\n      itemHierarchicalIndex: this.itemId\n    }) : this.fieldsSvc.text(this.item));\n  };\n\n  Object.defineProperty(TreeViewItem.prototype, \"fieldsSvc\", {\n    get: function get() {\n      return this.props.fieldsService;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeViewItem.prototype, \"itemId\", {\n    get: function get() {\n      return this.props.itemId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeViewItem.prototype, \"item\", {\n    get: function get() {\n      return this.props.item;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeViewItem.prototype, \"tabIndex\", {\n    get: function get() {\n      return (this.props.focusedItemId || this.props.tabbableItemId) === this.itemId ? 0 : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeViewItem.prototype, \"ariaExpanded\", {\n    get: function get() {\n      return this.fieldsSvc.hasChildren(this.item) || hasChildren(this.item) ? Boolean(this.fieldsSvc.expanded(this.item)) : undefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeViewItem.prototype, \"ariaChecked\", {\n    get: function get() {\n      if (this.props.checkboxes) {\n        if (this.fieldsSvc.checked(this.item)) {\n          return 'true';\n        } else {\n          return this.fieldsSvc.checkIndeterminate(this.item) ? 'mixed' : 'false';\n        }\n      } else {\n        return undefined;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeViewItem.prototype, \"ariaSelected\", {\n    get: function get() {\n      if (this.fieldsSvc.selected(this.item)) {\n        return true;\n      } else if (this.props.ariaMultiSelectable) {\n        return this.fieldsSvc.disabled(this.item) ? undefined : false;\n      } else {\n        return undefined;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TreeViewItem.prototype.getIconClassName = function () {\n    return classNames('k-icon', {\n      'k-i-expand': !this.fieldsSvc.expanded(this.item),\n      'k-i-collapse': this.fieldsSvc.expanded(this.item),\n      'k-i-loading': this.fieldsSvc.expanded(this.item) && !hasChildren(this.item)\n    });\n  };\n\n  TreeViewItem.prototype.getRootClassName = function () {\n    return classNames('k-item k-treeview-item', {\n      'k-state-disabled': this.fieldsSvc.disabled(this.item)\n    });\n  };\n\n  TreeViewItem.prototype.getContentClassName = function () {\n    return classNames('k-in', {\n      'k-state-focused': this.props.focusedItemId === this.itemId,\n      'k-state-selected': this.fieldsSvc.selected(this.item)\n    });\n  };\n\n  return TreeViewItem;\n}(React.Component);\n\nexport default TreeViewItem;","map":null,"metadata":{},"sourceType":"module"}