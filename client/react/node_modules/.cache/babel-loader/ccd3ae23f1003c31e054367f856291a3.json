{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { EMPTY_ID, isIdZeroLevel, createId, getRootParentId, getIdWithoutRootParentId, getAllShortIds } from './itemIdUtils';\nimport SortedPublicItemIds from './SortedPublicItemIds';\nimport { getNestedValue } from './misc';\n/**\n * @hidden\n */\n\nexport function isItemExpandedAndWithChildren(item, fieldsSvc) {\n  return fieldsSvc.expanded(item) && hasChildren(item);\n}\n/**\n * @hidden\n */\n\nexport function resolveItemId(publicId, idField, items) {\n  var resolvedIds = resolveItemsIds([publicId], idField, items);\n  return resolvedIds.length ? resolvedIds[0] : undefined;\n}\n/**\n * @hidden\n */\n\nexport function resolveItemsIds(publicIds, idField, items) {\n  var result = [];\n  var sortedIds = new SortedPublicItemIds();\n  sortedIds.init(publicIds);\n  resolveItemsIdsHelper(sortedIds, idField, items, EMPTY_ID, result);\n  return result;\n}\n/**\n * @hidden\n */\n\nexport function updateItem(items, itemId, update, cloneField) {\n  var _a;\n\n  var itemIndex = Number(getRootParentId(itemId));\n\n  if (itemIndex >= items.length) {\n    return items;\n  }\n\n  var result = items;\n  var item = items[itemIndex]; // Clone the item before updating it.\n\n  if (!item[cloneField]) {\n    result = items.slice();\n    item = result[itemIndex] = Object.assign({}, item, (_a = {}, _a[cloneField] = true, _a));\n  } // Directly update the item.\n\n\n  if (isIdZeroLevel(itemId)) {\n    update(item);\n  } else if (item.items) {\n    item.items = updateItem(item.items, getIdWithoutRootParentId(itemId), update, cloneField);\n  }\n\n  return result;\n}\n/**\n * @hidden\n */\n\nexport function hasChildren(item) {\n  return Boolean(item.items && item.items.length);\n}\n/**\n * @hidden\n */\n\nexport function isEnabledAndAllParentsEnabled(itemId, items, fieldsSvc) {\n  var ids = getAllShortIds(itemId);\n  var currentItems = items;\n\n  for (var i = 0; i < ids.length; i++) {\n    var currentItem = currentItems[Number(ids[i])];\n\n    if (fieldsSvc.disabled(currentItem)) {\n      return false;\n    } else {\n      currentItems = currentItem.items;\n    }\n  }\n\n  return true;\n}\n/**\n * @hidden\n */\n\nexport function getAllDirectIndirectChildrenIds(item, itemId, idField) {\n  return idField ? getChildrenPublicIds(item) : getChildrenHierarchicalIndices(item, itemId);\n\n  function getChildrenHierarchicalIndices(startItem, startItemId) {\n    var result = [];\n\n    if (startItem.items) {\n      for (var i = 0; i < startItem.items.length; i++) {\n        var id = createId(i, startItemId);\n        result.push(id);\n        result = result.concat(getChildrenHierarchicalIndices(startItem.items[i], id));\n      }\n    }\n\n    return result;\n  }\n\n  function getChildrenPublicIds(startItem) {\n    var result = [];\n\n    if (startItem.items) {\n      for (var i = 0; i < startItem.items.length; i++) {\n        result.push(getNestedValue(idField, startItem.items[i]));\n        result = result.concat(getChildrenPublicIds(startItem.items[i]));\n      }\n    }\n\n    return result;\n  }\n}\n/**\n * @hidden\n */\n\nexport function areAllDirectChildrenChecked(item, itemId, idField, check) {\n  if (item.items) {\n    return item.items.every(function (child, index) {\n      return check.indexOf(idField ? getNestedValue(idField, child) : createId(index, itemId)) > -1;\n    });\n  } else {\n    return true;\n  }\n}\n/**\n * @hidden\n */\n\nexport function getAllParents(itemId, items) {\n  var result = [];\n  var ids = getAllShortIds(itemId);\n  var currentItems = items;\n\n  for (var i = 0; i < ids.length - 1; i++) {\n    if (!currentItems) {\n      break;\n    }\n\n    var currentItem = currentItems[Number(ids[i])];\n    result.push(currentItem);\n    currentItems = currentItem.items;\n  }\n\n  return result;\n}\n/**\n * @hidden\n */\n\nexport function removeItem(itemId, items) {\n  var result = items.slice();\n\n  if (isIdZeroLevel(itemId)) {\n    result.splice(Number(itemId), 1);\n  } else {\n    var rootParentIndex = Number(getRootParentId(itemId));\n\n    var rootParent = result[rootParentIndex] = __assign({}, result[rootParentIndex]);\n\n    rootParent.items = removeItem(getIdWithoutRootParentId(itemId), rootParent.items);\n  }\n\n  return result;\n}\n/**\n * @hidden\n */\n\nexport function addItem(item, operation, targetItemId, items) {\n  var result = items.slice();\n\n  if (isIdZeroLevel(targetItemId)) {\n    if (operation === 'child') {\n      var targetItem = result[Number(targetItemId)] = __assign({}, result[Number(targetItemId)]);\n\n      if (targetItem.items) {\n        targetItem.items = targetItem.items.slice();\n        targetItem.items.push(item);\n      } else {\n        targetItem.items = [item];\n      }\n    } else {\n      result.splice(Number(targetItemId) + (operation === 'after' ? 1 : 0), 0, item);\n    }\n  } else {\n    var rootParentIndex = Number(getRootParentId(targetItemId));\n\n    var rootParent = result[rootParentIndex] = __assign({}, result[rootParentIndex]);\n\n    rootParent.items = addItem(item, operation, getIdWithoutRootParentId(targetItemId), rootParent.items);\n  }\n\n  return result;\n}\n\nfunction resolveItemsIdsHelper(publicItemIds, idField, items, parentItemId, resolvedIds) {\n  for (var i = 0; i < items.length; i++) {\n    var item = items[i];\n    var id = createId(i, parentItemId);\n\n    if (publicItemIds.hasId(getNestedValue(idField, item))) {\n      resolvedIds.push(id);\n    }\n\n    if (hasChildren(item)) {\n      resolveItemsIdsHelper(publicItemIds, idField, item.items, id, resolvedIds);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}