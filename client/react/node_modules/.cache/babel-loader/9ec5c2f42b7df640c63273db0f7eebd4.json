{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { useDir, getTabIndex, classNames } from '@progress/kendo-react-common';\nimport { selectionReducer } from './selection-reducer';\nimport { focusReducer } from './focus-reducer';\nimport { dataReducer } from './data-reducer';\nimport { Chip } from './Chip';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\n/**\n * @hidden\n */\n\nexport var ChipListSelectionContext = React.createContext([null, function (_args) {\n  /**/\n}]);\n/**\n * @hidden\n */\n\nexport var ChipListFocusContext = React.createContext([null, function (_args) {\n  /**/\n}]);\n/**\n * @hidden\n */\n\nexport var ChipListDataContext = React.createContext([null, function (_args) {\n  /**/\n}]);\n/**\n * @hidden\n */\n\nvar useSelection = function useSelection(defaultValue, args, callback) {\n  var _a = React.useState(defaultValue),\n      state = _a[0],\n      setState = _a[1];\n\n  var handleDispatchSelection = function handleDispatchSelection(action) {\n    var newState = selectionReducer(args.state || state, __assign({}, action, args));\n\n    if (callback) {\n      callback(newState, action.event);\n    }\n\n    setState(newState);\n  };\n\n  return [state, handleDispatchSelection];\n};\n/**\n * @hidden\n */\n\n\nvar useFocus = function useFocus(args) {\n  var _a = React.useState(null),\n      state = _a[0],\n      setState = _a[1];\n\n  var handleDispatchFocus = function handleDispatchFocus(action) {\n    var newState = focusReducer(action.payload, __assign({}, action, args));\n    setState(newState);\n  };\n\n  return [state, handleDispatchFocus];\n};\n/**\n * @hidden\n */\n\n\nvar useData = function useData(defaultData, args, callback) {\n  var _a = React.useState(defaultData),\n      state = _a[0],\n      setState = _a[1];\n\n  var handleDispatchData = function handleDispatchData(action) {\n    var newState = dataReducer(args.state || state, __assign({}, action, args));\n\n    if (callback) {\n      callback(newState, action.event);\n    }\n\n    setState(newState);\n  };\n\n  return [state, handleDispatchData];\n};\n/**\n * Represents the ChipList component.\n */\n\n\nexport var ChipList = React.forwardRef(function (props, ref) {\n  validatePackage(packageMetadata);\n  var target = React.useRef(null);\n  var chipListRef = React.useRef(null);\n  var dir = useDir(chipListRef, props.dir);\n  var ChipComponent = React.useMemo(function () {\n    return props.chip || Chip;\n  }, [props.chip, Chip]);\n  var selection = React.useMemo(function () {\n    return props.selection || defaultProps.selection;\n  }, [props.selection, defaultProps.selection]);\n  React.useImperativeHandle(target, function () {\n    return {\n      element: chipListRef.current,\n      props: props\n    };\n  });\n  React.useImperativeHandle(ref, function () {\n    return target.current;\n  });\n  var handleChange = React.useCallback(function (newValue, event) {\n    if (props.onChange && target.current) {\n      props.onChange.call(undefined, {\n        value: newValue,\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [props.onChange]);\n\n  var _a = useSelection(props.value || props.defaultValue, {\n    selection: selection,\n    state: props.value\n  }, handleChange),\n      stateValue = _a[0],\n      dispatchStateValue = _a[1];\n\n  var handleDataChange = React.useCallback(function (newData, event) {\n    if (props.onDataChange && target.current) {\n      props.onDataChange.call(undefined, {\n        value: newData,\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [props.onDataChange]);\n\n  var _b = useData(props.data || props.defaultData || defaultProps.defaultData, {\n    state: props.data,\n    valueField: props.valueField || defaultProps.valueField\n  }, handleDataChange),\n      stateData = _b[0],\n      dispatchData = _b[1];\n\n  var itemsReducer = React.useCallback(function (acc, current) {\n    acc.push(current[props.valueField || defaultProps.valueField]);\n    return acc;\n  }, [props.valueField, defaultProps.valueField]);\n  var data = React.useMemo(function () {\n    return props.data || stateData;\n  }, [props.data, stateData]);\n  var value = React.useMemo(function () {\n    return props.value || stateValue;\n  }, [props.value, stateValue]);\n  var items = React.useMemo(function () {\n    return data.reduce(itemsReducer, []);\n  }, [data, itemsReducer]);\n\n  var _c = useFocus({\n    items: items\n  }),\n      focus = _c[0],\n      dispatchFocus = _c[1];\n\n  return React.createElement(ChipListSelectionContext.Provider, {\n    value: [value, dispatchStateValue]\n  }, React.createElement(ChipListFocusContext.Provider, {\n    value: [focus, dispatchFocus]\n  }, React.createElement(ChipListDataContext.Provider, {\n    value: [data, dispatchData]\n  }, React.createElement(\"div\", {\n    ref: chipListRef,\n    id: props.id,\n    dir: dir,\n    tabIndex: getTabIndex(props.tabIndex, props.disabled, undefined),\n    className: classNames('k-chip-list', {\n      'k-rtl': dir === 'rtl',\n      'k-selection-single': selection === 'single',\n      'k-selection-multiple': selection === 'multiple',\n      'k-state-disabled': props.disabled\n    }),\n    \"aria-labelledby\": props.ariaLabelledBy,\n    \"aria-describedby\": props.ariaDescribedBy\n  }, data.map(function (item) {\n    return React.createElement(ChipComponent, {\n      dataItem: item,\n      key: item[props.valueField || defaultProps.valueField],\n      text: item[props.textField || defaultProps.textField],\n      value: item[props.valueField || defaultProps.valueField]\n    });\n  })))));\n});\nvar propTypes = {\n  id: PropTypes.string,\n  className: PropTypes.string,\n  tabIndex: PropTypes.number,\n  data: PropTypes.any,\n  defaultData: PropTypes.arrayOf(PropTypes.any),\n  onDataChange: PropTypes.func,\n  value: PropTypes.oneOf([PropTypes.any, PropTypes.arrayOf(PropTypes.any)]),\n  defaultValue: PropTypes.oneOf([PropTypes.any, PropTypes.arrayOf(PropTypes.any)]),\n  onChange: PropTypes.func,\n  selection: PropTypes.oneOf(['single', 'multiple']),\n  textField: PropTypes.string,\n  valueField: PropTypes.string,\n  disabled: PropTypes.bool,\n  dir: PropTypes.oneOf(['ltr', 'rtl']),\n  ariaLabelledBy: PropTypes.string,\n  ariaDescribedBy: PropTypes.string\n};\nvar defaultProps = {\n  chip: Chip,\n  disabled: false,\n  defaultValue: null,\n  defaultData: [],\n  dir: 'ltr',\n  selection: 'none',\n  textField: 'text',\n  valueField: 'value',\n  removable: 'removable'\n};\nChipList.displayName = 'KendoReactChipList'; // TODO: delete casting when @types/react is updated!\n\nChipList.propTypes = propTypes;\nChipList.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}