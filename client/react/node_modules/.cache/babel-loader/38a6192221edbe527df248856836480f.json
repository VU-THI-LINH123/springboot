{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { isString, isDate } from './utils';\n/**\n * @hidden\n * Creates a single arity function which wraps the value based on the provided predicate.\n * @example\n * ```\n * wrapIf(() => ignoreCase) `tolower(${field})`\n * //ignoreCase=true -> tolower(${field})`\n * //ignoreCase=false -> ${field}`\n * ```\n */\n\nexport var wrapIf = function wrapIf(predicate) {\n  return function (str) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    return predicate() ? \"\" + str[0] + args[0] + str[1] : args[0];\n  };\n};\n/**\n * @hidden\n */\n\nexport var toUTC = function toUTC(date) {\n  return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n};\n/**\n * @hidden\n */\n\nexport var quote = function quote(_a) {\n  var field = _a.field,\n      value = _a.value,\n      ignoreCase = _a.ignoreCase,\n      operator = _a.operator;\n  return {\n    value: \"'\" + value.replace(/'/g, \"''\") + \"'\",\n    field: field,\n    ignoreCase: ignoreCase,\n    operator: operator\n  };\n};\n/**\n * @hidden\n */\n\nexport var encodeValue = function encodeValue(_a) {\n  var field = _a.field,\n      value = _a.value,\n      ignoreCase = _a.ignoreCase,\n      operator = _a.operator;\n  return {\n    value: \"\" + encodeURIComponent(value),\n    field: field,\n    ignoreCase: ignoreCase,\n    operator: operator\n  };\n};\n/**\n * @hidden\n */\n\nexport var toLower = function toLower(_a) {\n  var field = _a.field,\n      value = _a.value,\n      ignoreCase = _a.ignoreCase,\n      operator = _a.operator;\n  return {\n    field: wrapIf(function () {\n      return ignoreCase;\n    })(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"tolower(\", \")\"], [\"tolower(\", \")\"])), field),\n    value: value,\n    ignoreCase: ignoreCase,\n    operator: operator\n  };\n};\n/**\n * @hidden\n */\n\nexport var normalizeField = function normalizeField(_a) {\n  var field = _a.field,\n      value = _a.value,\n      ignoreCase = _a.ignoreCase,\n      operator = _a.operator;\n  return {\n    value: value,\n    field: field.replace(/\\./g, \"/\"),\n    ignoreCase: ignoreCase,\n    operator: operator\n  };\n};\n/**\n * @hidden\n */\n\nexport var isStringValue = function isStringValue(x) {\n  return isString(x.value);\n};\n/**\n * @hidden\n */\n\nexport var isDateValue = function isDateValue(x) {\n  return isDate(x.value);\n};\n/**\n * @hidden\n */\n\nexport var serializeFilters = function serializeFilters(map, join) {\n  return function (filter) {\n    var brackets = wrapIf(function () {\n      return filter.filters.length > 1;\n    });\n    return brackets(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"(\", \")\"], [\"(\", \")\"])), filter.filters.map(map).join(join(filter)));\n  };\n};\nvar templateObject_1, templateObject_2;","map":null,"metadata":{},"sourceType":"module"}