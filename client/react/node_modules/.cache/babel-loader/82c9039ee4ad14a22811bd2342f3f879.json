{"ast":null,"code":"import { MS_PER_HOUR, MS_PER_MINUTE } from '../constants';\nimport { cloneDate } from '../clone-date';\nimport { abbrTimezone } from './abbr-timezone';\nimport { offset } from './offset';\nimport { toLocalDate } from './to-local-date';\n\nvar addMinutes = function addMinutes(date, minutes) {\n  return new Date(date.getTime() + minutes * MS_PER_MINUTE);\n};\n\nvar addHours = function addHours(date, hours) {\n  return new Date(date.getTime() + hours * MS_PER_HOUR);\n};\n\nvar dayAbbr = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nvar monthAbbr = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dev'];\n\nvar datePrefix = function datePrefix(utcDate) {\n  return dayAbbr[utcDate.getUTCDay()] + ' ' + monthAbbr[utcDate.getUTCMonth()];\n};\n\nvar padNumber = function padNumber(num, len) {\n  if (len === void 0) {\n    len = 2;\n  }\n\n  var sign = num < 0 ? '-' : '';\n  return sign + new Array(len).concat([Math.abs(num)]).join('0').slice(-len);\n};\n\nfunction isZoneMissingHour(date, timezone) {\n  var currentOffset = offset(timezone, date);\n  var prevHour = addHours(date, -1);\n  var prevOffset = offset(timezone, prevHour);\n  return currentOffset < prevOffset;\n}\n\nfunction shiftZoneMissingHour(utcDate, timezone) {\n  // Adjust for missing hour during DST transition in timezone.\n  var dstOffset = isZoneMissingHour(utcDate, timezone) ? 1 : 0;\n  return addHours(utcDate, dstOffset);\n}\n\nfunction convertTimezoneUTC(utcLocal, fromTimezone, toTimezone) {\n  if (fromTimezone === toTimezone) {\n    return utcLocal;\n  }\n\n  var fromOffset = offset(fromTimezone, utcLocal);\n  var toOffset = offset(toTimezone, utcLocal);\n  var baseDiff = fromOffset - toOffset;\n  var midDate = addMinutes(utcLocal, baseDiff);\n  var midOffset = offset(toTimezone, midDate);\n  var dstDiff = toOffset - midOffset;\n  return addMinutes(utcLocal, baseDiff + dstDiff);\n}\n\nfunction formatOffset(tzOffset) {\n  var sign = tzOffset <= 0 ? '+' : '-';\n  var value = Math.abs(tzOffset);\n  var hours = padNumber(Math.floor(value / 60));\n  var minutes = padNumber(value % 60);\n  return \"GMT\" + sign + hours + minutes;\n}\n/**\n * Represents a local date in a specified timezone.\n *\n * The following example demonstrates how to convert a local date to the specified timezone.\n *\n * @example\n * ```ts\n * import { ZonedDate } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/America/New_York';\n *\n * const date = new Date('2018-03-13T00:00:00Z');\n * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n *\n * // If you run this example in GMT+0200,\n * // the output will be '2018-03-12T22:00:00.000Z'.\n * console.log(tzDate.toISOString());\n * ```\n *\n * The following example demonstrates how to convert between timezones.\n *\n * @example\n * ```ts\n * import { ZonedDate } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/America/New_York';\n * import '@progress/kendo-date-math/tz/America/Los_Angeles';\n *\n * // Note the \"Z\" suffix for UTC dates.\n * const date = new Date('2018-03-12T22:00:00Z');\n *\n * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n * const result = tzDate.toTimezone('America/Los_Angeles');\n *\n * // Regardless of the browser timezone\n * // the output will be '2018-03-12T15:00:00.000Z'.\n * console.log(tzDate.toUTCDate());\n * ```\n */\n\n\nvar ZonedDate =\n/** @class */\nfunction () {\n  // The constructor is aliased as a static fromUTCDate method\n  // to clarify the meaning of the utcDate parameter.\n  //\n  // It can be confused for a local date time while it is in fact\n  // treated as a UTC date that represents the local date in the timezone.\n  function ZonedDate(utcDate, timezone) {\n    this._utcDate = cloneDate(utcDate);\n    this.timezone = timezone;\n    var tzOffset = offset(timezone, utcDate);\n    this.timezoneOffset = tzOffset;\n    var localDate = shiftZoneMissingHour(utcDate, timezone);\n    this._localDate = convertTimezoneUTC(localDate, timezone, 'Etc/UTC');\n  }\n\n  Object.defineProperty(ZonedDate.prototype, \"cachedLocalDate\", {\n    /**\n     * Returns a cached local date that denotes the exact time in the set timezone.\n     *\n     * @return Date - A local date that denotes the exact time in the set timezone.\n     *\n     * This property is an alternative to `toLocalDate()` that returns a cached value instead of cloning it.\n     *\n     * > Modifying the returned instance will corrupt the `ZonedDate` state.\n     */\n    get: function get() {\n      return this._localDate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ZonedDate.prototype, \"cachedUTCDate\", {\n    /**\n     * Returns a cached `Date` instance with UTC date parts that are set to the local time in the set timezone.\n     *\n     * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.\n     *\n     * This property is an alternative to `toUTCDate()` that returns a cached value instead of cloning it.\n     *\n     * > Modifying the returned instance will corrupt the `ZonedDate` state.\n     */\n    get: function get() {\n      return this._utcDate;\n    },\n    enumerable: true,\n    configurable: true\n  }); // tslint:disable:max-line-length\n\n  /**\n   * Converts an existing date to a specified timezone.\n   *\n   * If the `timezone` parameter is omitted, the `ZonedDate` defaults to the timezone of the browser. This concept is known as \"floating date\" because it does not represent a particular moment in time. Instead, its actual value depends on the current timezone of the browser.\n   *\n   * @param date - The local date that represents the actual time instance.\n   * @param timezone - The ID of the timezone that will be assumed. For example, `Europe/Sofia`.\n   * @return ZonedDate - The date in the specified timezone.\n   *\n   * @example\n   * ```ts\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   *\n   * const date = new Date('2018-03-13T00:00:00');\n   * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n   *\n   * // If you run this example in GMT+0200,\n   * // the output will be 'Mon Mar 12 2018 18:00:00 GMT+0200 (EET)'.\n   * console.log(tzDate.toString());\n   *\n   * // If you run this example in UTC,\n   * // the output will be '2018-03-12T22:00:00.000Z'.\n   * console.log(tzDate.toISOString());\n   * ```\n   */\n  // tslint:enable:max-line-length\n\n  ZonedDate.fromLocalDate = function (date, timezone) {\n    if (timezone === void 0) {\n      timezone = '';\n    }\n\n    var utcDate = convertTimezoneUTC(date, 'Etc/UTC', timezone);\n    var shiftZone = isZoneMissingHour(utcDate, timezone);\n    var zoneOffset = offset(timezone, utcDate);\n    var fixedOffset = 0;\n\n    if (shiftZone) {\n      // Adjust for the missing hour during the DST transition in the timezone.\n      fixedOffset = zoneOffset > 0 ? -1 : 1;\n    }\n\n    var adjDate = addHours(utcDate, fixedOffset);\n    return ZonedDate.fromUTCDate(adjDate, timezone);\n  }; // tslint:disable:max-line-length\n\n  /**\n   * Creates a date in a specific timezone from the UTC date parts of the supplied `Date`.\n   *\n   * If the `timezone` parameter is omitted, the `ZonedDate` defaults to the timezone of the browser. This concept is known as \"floating date\" because it does not represent a particular moment in time. Instead, its actual value depends on the current timezone of the browser.\n   *\n   * @param date - The UTC date that represents the time in the target zone. This time is not the actual time instant in UTC.\n   * @param timezone - The ID of the timezone that will be assumed. For example, `Europe/Sofia`.\n   * @return ZonedDate - The date in the specified timezone.\n   *\n   * @example\n   * ```ts\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   *\n   * // Note the \"Z\" suffix for UTC dates.\n   * const date = new Date('2018-03-12T18:00:00Z');\n   *\n   * // Alternative syntax using Date.UTC\n   * // const date = new Date(Date.UTC(2018, 2, 12, 18, 0));\n   *\n   * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n   *\n   * // Regardless of the browser timezone\n   * // the output will be 'Mon Mar 12 2018 18:00:00 GMT+0200 (EET)'.\n   * console.log(tzDate.toString());\n   *\n   * // Regardless of the browser timezone\n   * // the output in UTC will be '2018-03-12T22:00:00.000Z'.\n   * console.log(tzDate.toISOString());\n   * ```\n   */\n  // tslint:enable:max-line-length\n\n\n  ZonedDate.fromUTCDate = function (utcDate, timezone) {\n    if (timezone === void 0) {\n      timezone = '';\n    }\n\n    return new ZonedDate(utcDate, timezone);\n  };\n  /**\n   * Returns a local date that denotes the exact time in the set timezone.\n   *\n   * @return Date - A local date that denotes the exact time in the set timezone.\n   *\n   * @example\n   * ```ts\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   *\n   * // Note the \"Z\" suffix for UTC dates.\n   * const date = new Date('2018-03-12T18:00:00Z');\n   * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n   *\n   * // The local date represents the same moment in time as the ZonedDate:\n   * // `2018-03-12T22:00:00.000Z`.\n   * console.log(tzDate.toLocalDate().toISOString());\n   *\n   * // The local date will apply the timezone of the browser. For example,\n   * // `Tue Mar 13 2018 00:00:00 GMT+0200 (Eastern European Standard Time)`.\n   * console.log(tzDate.toLocalDate().toString())\n   * ```\n   */\n\n\n  ZonedDate.prototype.toLocalDate = function () {\n    return cloneDate(this._localDate);\n  };\n  /**\n   * Returns a `Date` instance with UTC date parts that are set to the local time in the set timezone.\n   *\n   * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.\n   *\n   * @example\n   * ```ts\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   *\n   * // Note the \"Z\" suffix for UTC dates.\n   * const date = new Date('2018-03-12T18:00:00Z');\n   * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n   *\n   * // Regardless of the browser timezone\n   * // the output will be '2018-03-12T18:00:00.000Z'.\n   * console.log(tzDate.toUTCDate());\n   * ```\n   */\n\n\n  ZonedDate.prototype.toUTCDate = function () {\n    return cloneDate(this._utcDate);\n  };\n  /**\n   * Converts the date to the specified timezone.\n   *\n   * @param toTimezone - The timezone to which the values will be converted. For example, `America/Los_Angeles`.\n   * @returns ZonedDate - The resulting zoned date.\n   *\n   * @example\n   * ```ts\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   * import '@progress/kendo-date-math/tz/America/Los_Angeles';\n   *\n   * // Note the \"Z\" suffix for UTC dates.\n   * const date = new Date('2018-03-12T22:00:00Z');\n   *\n   * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n   * const result = tzDate.toTimezone('America/Los_Angeles');\n   *\n   * // Regardless of the browser timezone\n   * // the output will be '2018-03-12T15:00:00.000Z'.\n   * console.log(tzDate.toUTCDate());\n   * ```\n   */\n\n\n  ZonedDate.prototype.toTimezone = function (toTimezone) {\n    if (this.timezone === toTimezone) {\n      return this.clone();\n    }\n\n    var tzOffset = offset(this.timezone, this._utcDate);\n    var date = addMinutes(this._utcDate, tzOffset);\n    return ZonedDate.fromLocalDate(date, toTimezone);\n  };\n  /**\n   * Returns a new instance that represents the same date.\n   *\n   * @returns Date - A copy of the instance of the current zoned date.\n   */\n\n\n  ZonedDate.prototype.clone = function () {\n    return ZonedDate.fromUTCDate(this._utcDate, this.timezone);\n  }; // tslint:disable:max-line-length\n\n  /**\n   * Adds the specified number of days and returns a new instance with the resulting date in the same timezone.\n   *\n   * @param days - The number of days that will be added.\n   * @returns ZonedDate - The resulting date.\n   */\n  // tslint:enable:max-line-length\n\n\n  ZonedDate.prototype.addDays = function (days) {\n    var newDate = new Date(this._utcDate.getTime());\n    newDate.setUTCDate(newDate.getUTCDate() + days);\n    return ZonedDate.fromUTCDate(newDate, this.timezone);\n  }; // tslint:disable:max-line-length\n\n  /**\n   * Adds the specified number of milliseconds and returns a new instance with the resulting date in the same timezone.\n   *\n   * The method compensates for DST transitions and ensures that the resulting date occurs exactly after the set amount of time in the timezone.\n   *\n   * @param milliseconds - The number of days that will be added.\n   * @returns ZonedDate - The resulting date.\n   */\n  // tslint:enable:max-line-length\n\n\n  ZonedDate.prototype.addTime = function (milliseconds) {\n    var utcDate = new Date(this._utcDate.getTime());\n    var utcMid = shiftZoneMissingHour(utcDate, this.timezone);\n    utcMid.setTime(utcMid.getTime() + milliseconds);\n    var utcResult = shiftZoneMissingHour(utcMid, this.timezone);\n    return ZonedDate.fromUTCDate(utcResult, this.timezone);\n  }; // tslint:disable:max-line-length\n\n  /**\n   * Returns a new instance of the same zoned date having its time parts set to `00:00:00.000`.\n   *\n   * @returns ZonedDate - The same date having its time parts set to `00:00:00.000`.\n   */\n  // tslint:enable:max-line-length\n\n\n  ZonedDate.prototype.stripTime = function () {\n    var date = this._utcDate;\n    var ticks = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);\n    return ZonedDate.fromUTCDate(new Date(ticks), this.timezone);\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getTime = function () {\n    return this._localDate.getTime();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getTimezoneOffset = function () {\n    return this.timezoneOffset;\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getFullYear = function () {\n    return this._utcDate.getUTCFullYear();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getMonth = function () {\n    return this._utcDate.getUTCMonth();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getDate = function () {\n    return this._utcDate.getUTCDate();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getDay = function () {\n    return this._utcDate.getUTCDay();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getHours = function () {\n    return this._utcDate.getUTCHours();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getMinutes = function () {\n    return this._utcDate.getUTCMinutes();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getSeconds = function () {\n    return this._utcDate.getUTCSeconds();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getMilliseconds = function () {\n    return this._utcDate.getUTCMilliseconds();\n  }; // The local date UTC parts represent actual UTC time\n\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getUTCDate = function () {\n    return this._localDate.getUTCDate();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getUTCDay = function () {\n    return this._localDate.getUTCDay();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getUTCFullYear = function () {\n    return this._localDate.getUTCFullYear();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getUTCHours = function () {\n    return this._localDate.getUTCHours();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getUTCMilliseconds = function () {\n    return this._localDate.getUTCMilliseconds();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getUTCMinutes = function () {\n    return this._localDate.getUTCMinutes();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getUTCMonth = function () {\n    return this._localDate.getUTCMonth();\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.getUTCSeconds = function () {\n    return this._localDate.getUTCSeconds();\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setTime = function (time) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setMilliseconds = function (ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setUTCMilliseconds = function (ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setSeconds = function (sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setUTCSeconds = function (sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setMinutes = function (min, sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setUTCMinutes = function (min, sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setHours = function (hours, min, sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setUTCHours = function (hours, min, sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setDate = function (date) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setUTCDate = function (date) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setMonth = function (month, date) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setUTCMonth = function (month, date) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setFullYear = function (year, month, date) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setUTCFullYear = function (year, month, date) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.toISOString = function () {\n    return this._localDate.toISOString();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.toJSON = function () {\n    return this._localDate.toJSON();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.toString = function () {\n    var dateString = datePrefix(this._utcDate);\n    var timeString = this.toTimeString();\n    return dateString + \" \" + this.getDate() + \" \" + this.getFullYear() + \" \" + timeString;\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.toDateString = function () {\n    return toLocalDate(this._utcDate).toDateString();\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.toTimeString = function () {\n    var hours = padNumber(this.getHours());\n    var minutes = padNumber(this.getMinutes());\n    var seconds = padNumber(this.getSeconds());\n    var time = hours + \":\" + minutes + \":\" + seconds;\n    var tzOffset = formatOffset(this.timezoneOffset);\n    var abbrev = abbrTimezone(this.timezone, this._utcDate);\n\n    if (abbrev) {\n      abbrev = \" (\" + abbrev + \")\";\n    }\n\n    return time + \" \" + tzOffset + abbrev;\n  };\n\n  ZonedDate.prototype.toLocaleString = function (locales, options) {\n    return this._localDate.toLocaleString(locales, options);\n  };\n\n  ZonedDate.prototype.toLocaleDateString = function (locales, options) {\n    return this._localDate.toLocaleDateString(locales, options);\n  };\n\n  ZonedDate.prototype.toLocaleTimeString = function (locales, options) {\n    return this._localDate.toLocaleTimeString(locales, options);\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.toUTCString = function () {\n    return this.toTimezone('Etc/UTC').toString();\n  };\n\n  ZonedDate.prototype[Symbol.toPrimitive] = function (hint) {\n    if (hint === 'string' || hint === 'default') {\n      return this.toString();\n    }\n\n    return this._localDate.getTime();\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.valueOf = function () {\n    return this.getTime();\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.getVarDate = function () {\n    throw new Error('Not implemented.');\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.format = function (_) {\n    throw new Error('Not implemented.');\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.formatUTC = function (_) {\n    throw new Error('Not implemented.');\n  };\n\n  return ZonedDate;\n}();\n\nexport { ZonedDate };","map":null,"metadata":{},"sourceType":"module"}