{"ast":null,"code":"import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { ChipListSelectionContext, ChipListFocusContext, ChipListDataContext } from './ChipList';\nimport { classNames, useDir, getTabIndex, Keys } from '@progress/kendo-react-common';\nimport { FOCUS_ACTION } from './focus-reducer';\nimport { DATA_ACTION } from './data-reducer';\nimport { SELECTION_ACTION } from './selection-reducer';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\n/**\n * Represents the Chip component.\n */\n\nexport var Chip = React.forwardRef(function (props, ref) {\n  validatePackage(packageMetadata);\n  var target = React.useRef(null);\n  var chipRef = React.useRef(null);\n  var dir = useDir(chipRef, props.dir);\n  React.useImperativeHandle(target, function () {\n    return {\n      element: chipRef.current,\n      props: props\n    };\n  });\n  React.useImperativeHandle(ref, function () {\n    return target.current;\n  });\n\n  var _a = React.useContext(ChipListSelectionContext),\n      selection = _a[0],\n      dispatchSelection = _a[1];\n\n  var _b = React.useContext(ChipListFocusContext),\n      focus = _b[0],\n      dispatchFocus = _b[1];\n\n  var _c = React.useContext(ChipListDataContext),\n      dispatchData = _c[1];\n\n  var selected = React.useMemo(function () {\n    return props.selected || (Array.isArray(selection) ? selection.some(function (i) {\n      return i === props.value;\n    }) : selection === props.value);\n  }, [props.selected, props.value, selection]);\n  var focused = React.useMemo(function () {\n    return focus === props.value;\n  }, [props.value, focus]);\n  var look = React.useMemo(function () {\n    return props.look || defaultProps.look;\n  }, [props.look]);\n  React.useEffect(function () {\n    if (focused && chipRef.current) {\n      chipRef.current.focus();\n    }\n  }, [focused]); // React.useEffect(() => dispatchItemsContext({type: FOCUS_ACTION.register, payload: target }), []);\n\n  var handleClick = React.useCallback(function (event) {\n    dispatchSelection({\n      type: SELECTION_ACTION.toggle,\n      payload: props.value,\n      event: event\n    });\n\n    if (props.onClick) {\n      props.onClick.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [props.onClick, dispatchSelection, props.value]);\n  var handleRemove = React.useCallback(function (event) {\n    if (!props.removable) {\n      return;\n    }\n\n    dispatchData({\n      type: DATA_ACTION.remove,\n      payload: props.value,\n      event: event\n    });\n    dispatchFocus({\n      type: FOCUS_ACTION.reset,\n      payload: props.value,\n      event: event\n    });\n    dispatchSelection({\n      type: SELECTION_ACTION.remove,\n      payload: props.value,\n      event: event\n    });\n\n    if (props.onRemove) {\n      props.onRemove.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [props.onRemove, props.removable, dispatchData, dispatchFocus, dispatchSelection]);\n  var handleKeyDown = React.useCallback(function (event) {\n    switch (event.keyCode) {\n      case Keys.left:\n        dispatchFocus({\n          type: FOCUS_ACTION.prev,\n          payload: props.value,\n          event: event\n        });\n        break;\n\n      case Keys.right:\n        dispatchFocus({\n          type: FOCUS_ACTION.next,\n          payload: props.value,\n          event: event\n        });\n        break;\n\n      case Keys.enter:\n        dispatchSelection({\n          type: SELECTION_ACTION.toggle,\n          payload: props.value,\n          event: event\n        });\n        break;\n\n      case Keys.delete:\n        handleRemove(event);\n        break;\n\n      default:\n        break;\n    }\n\n    if (props.onKeyDown) {\n      props.onKeyDown.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [props.onKeyDown, dispatchFocus, dispatchSelection, handleRemove]);\n  var handleFocus = React.useCallback(function (event) {\n    dispatchFocus({\n      payload: props.value,\n      type: FOCUS_ACTION.current,\n      event: event\n    });\n\n    if (props.onFocus) {\n      props.onFocus.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [props.onFocus, dispatchFocus]);\n  var handleBlur = React.useCallback(function (event) {\n    if (props.onBlur) {\n      props.onBlur.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [props.onBlur]);\n  return React.createElement(\"div\", {\n    id: props.value,\n    style: props.style,\n    ref: chipRef,\n    dir: dir,\n    tabIndex: getTabIndex(props.tabIndex, props.disabled, undefined),\n    className: classNames('k-chip', 'k-chip-filled', {\n      'k-rtl': dir === 'rtl',\n      'k-chip-disabled': props.disabled,\n      'k-chip-selected': selected,\n      'k-chip-focused': focused,\n      'k-chip-success': props.type === 'success',\n      'k-chip-warning': props.type === 'warning',\n      'k-chip-error': props.type === 'error',\n      'k-chip-info': props.type === 'info',\n      'k-chip-has-icon': props.icon,\n      'k-chip-outline': look === 'outlined',\n      'k-chip-filled': look === 'filled',\n      'aria-checked': props.selected,\n      'aria-disabled': !props.selected,\n      'aria-describedby': props.ariaDescribedBy\n    }, props.className),\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, React.createElement(\"span\", {\n    className: 'k-selected-icon-wrapper'\n  }, selected && React.createElement(\"span\", {\n    className: \"k-selected-icon k-icon \" + (props.selectedIcon || defaultProps.selectedIcon)\n  })), props.icon && React.createElement(\"span\", {\n    className: \"k-icon k-chip-icon \" + props.icon\n  }), React.createElement(\"span\", {\n    className: 'k-chip-content'\n  }, props.text && React.createElement(\"span\", {\n    \"aria-label\": props.text,\n    className: 'k-chip-label'\n  }, props.text)), props.removable && React.createElement(\"span\", {\n    className: 'k-remove-icon',\n    onClick: handleRemove\n  }, React.createElement(\"span\", {\n    className: \"k-icon \" + props.removeIcon\n  })));\n});\nvar propTypes = {\n  id: PropTypes.string,\n  text: PropTypes.string,\n  value: PropTypes.any,\n  type: PropTypes.oneOf(['none', 'success', 'warning', 'error', 'info']),\n  dir: PropTypes.oneOf(['ltr', 'rtl']),\n  removable: PropTypes.bool,\n  removeIcon: PropTypes.string,\n  disabled: PropTypes.bool,\n  icon: PropTypes.string,\n  selectedIcon: PropTypes.string,\n  look: PropTypes.string,\n  onRemove: PropTypes.func,\n  dataItem: PropTypes.any,\n  selected: PropTypes.bool,\n  ariaDescribedBy: PropTypes.string\n};\nvar defaultProps = {\n  disabled: false,\n  removable: false,\n  selectedIcon: 'k-i-check',\n  look: 'filled',\n  removeIcon: 'k-i-close-circle',\n  dir: 'ltr'\n};\nChip.displayName = 'KendoReactChip'; // TODO: delete casting when @types/react is updated!\n\nChip.propTypes = propTypes;\nChip.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}