{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Group } from './Group';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\n/**\n * Represents the [KendoReact Filter component]({% slug overview_filter %}).\n */\n\nvar Filter =\n/** @class */\nfunction (_super) {\n  __extends(Filter, _super);\n\n  function Filter(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.onFilterChange = function (event) {\n      var changeEvent = {\n        filter: event.nextFilter,\n        syntheticEvent: event.syntheticEvent,\n        nativeEvent: event.nativeEvent,\n        target: _this\n      };\n\n      _this.props.onChange.call(undefined, changeEvent);\n    };\n\n    _this.onGroupRemove = function (event) {\n      var changeEvent = {\n        filter: __assign({}, _this.props.value, {\n          filters: []\n        }),\n        syntheticEvent: event.syntheticEvent,\n        nativeEvent: event.nativeEvent,\n        target: _this\n      };\n\n      _this.props.onChange.call(undefined, changeEvent);\n    };\n\n    validatePackage(packageMetadata);\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  Filter.prototype.render = function () {\n    return React.createElement(\"div\", {\n      className: 'k-widget k-filter' + (this.props.className ? ' ' + this.props.className : ''),\n      style: this.props.style\n    }, React.createElement(\"ul\", {\n      className: \"k-filter-container\"\n    }, React.createElement(\"li\", {\n      className: \"k-filter-group-main\"\n    }, React.createElement(Group, {\n      filter: this.props.value,\n      fields: this.props.fields,\n      onChange: this.onFilterChange,\n      onRemove: this.onGroupRemove,\n      defaultGroupFilter: this.props.defaultGroupFilter || {\n        logic: 'and',\n        filters: []\n      }\n    }))));\n  };\n  /**\n   * @hidden\n   */\n\n\n  Filter.propTypes = {\n    className: PropTypes.string,\n    style: PropTypes.object,\n    fields: function fields(props, propName) {\n      var prop = props[propName];\n\n      if (prop === undefined) {\n        return new Error(\"Property '\" + propName + \"' is missing.\");\n      } else if (!Array.isArray(prop)) {\n        return new Error(\"Property '\" + propName + \"' needs to be Array<FieldSettings>.\");\n      } else if (Object.keys(prop.reduce(function (acc, cur) {\n        var _a;\n\n        return __assign({}, acc, (_a = {}, _a[cur.name] = 1, _a));\n      }, {})).length !== prop.length) {\n        return new Error(\"Property '\" + propName + \"' needs to contain objects with unique 'name' field.\");\n      }\n    },\n    value: PropTypes.object.isRequired,\n    onChange: PropTypes.func.isRequired\n  };\n  return Filter;\n}(React.Component);\n\nexport { Filter };","map":null,"metadata":{},"sourceType":"module"}